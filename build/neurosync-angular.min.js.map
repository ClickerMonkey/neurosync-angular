{"version":3,"sources":["neurosync-angular.js"],"names":["app","global","undefined","NeuroFactory","$http","Neuro","rest","database","execute","method","data","url","success","failure","offlineValue","onRestSuccess","response","onRestError","status","debug","Debugs","REST","this","forceOffline","options","then","all","api","get","model","$key","create","encoded","update","remove","query","Neuro_debug","NeuroSettings","apply","arguments","ScopeEval","listenToNetworkStatus","NeuroBindFactory","NeuroBind","scope","target","callback","notify","newNotification","release","newRelease","on","NeuroResolve","constant","factory","Events","Database","Model","Collection","Page","Scope","prototype","isNeuro","$on","off","$off","binder","$evalAsync","name","$q","defer","promise","input","grabModel","instance","resolve","reject","fetch","remoteQuery","ready","where","whereProperties","whereValue","whereEquals","filtered","angular","module","window"],"mappings":"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","file":"neurosync-angular.min.js","sourcesContent":["(function (app, global, undefined)\n{\n\n  var NeuroSettings = {\n    debug: false\n  };\n\n  var NeuroResolve = {\n\n  };\n\n  app\n    .constant( 'NeuroResolve', NeuroResolve )\n    .constant( 'NeuroSettings', NeuroSettings )\n    .factory( 'Neuro', ['$http', NeuroFactory] )\n    .factory( 'NeuroBind', NeuroBindFactory )\n  ;\n\n  global.NeuroBind = NeuroBind;\n  global.NeuroResolve = NeuroResolve;\n\n  function NeuroFactory($http)\n  {\n\n    Neuro.rest = function(database)\n    {\n\n      function execute( method, data, url, success, failure, offlineValue )\n      {\n        Neuro.debug( Neuro.Debugs.REST, this, method, url, data );\n\n        if ( Neuro.forceOffline )\n        {\n          failure( offlineValue, 0 );\n        }\n        else\n        {\n          function onRestSuccess(response) \n          {\n            success( response.data );\n          }\n\n          function onRestError(response) \n          {\n            failure( response.data, response.status );\n          }\n\n          var options = \n          {\n            method: method,\n            data: data,\n            url: url\n          };\n\n          $http( options ).then( onRestSuccess, onRestError );\n        }\n      }\n      \n      return {\n        all: function( success, failure )\n        {\n          execute( 'GET', undefined, database.api, success, failure, [] );\n        },\n        get: function( model, success, failure )\n        {\n          execute( 'GET', undefined, database.api + model.$key(), success, failure );\n        },\n        create: function( model, encoded, success, failure )\n        {\n          execute( 'POST', encoded, database.api, success, failure, {} );\n        },\n        update: function( model, encoded, success, failure )\n        {\n          execute( 'PUT', encoded, database.api + model.$key(), success, failure, {} );\n        },\n        remove: function( model, success, failure )\n        {\n          execute( 'DELETE', undefined, database.api + model.$key(), success, failure, {} );\n        },\n        query: function( query, success, failure )\n        {\n          var method = query.method || 'GET';\n          var data = query.data || undefined;\n          var url = query.url || query;\n\n          execute( method, data, url, success, failure );\n        }\n      };\n\n    };\n\n    var Neuro_debug = Neuro.debug;\n\n    Neuro.debug = function()\n    {\n      if ( NeuroSettings.debug )\n      {\n        Neuro_debug.apply( this, arguments );\n      }\n    };\n\n    Neuro.Debugs.ScopeEval = 100000;\n\n    Neuro.listenToNetworkStatus();\n\n    return Neuro;\n  }\n\n  function NeuroBindFactory()\n  {\n    return NeuroBind;\n  }\n\n  function NeuroBind( scope, target, callback )\n  {\n    if ( !(this instanceof NeuroBind) ) return new NeuroBind( scope, target, callback );\n\n    this.scope = scope;\n    this.target = target;\n    this.callback = callback;\n\n    this.notify = this.newNotification();\n    this.release = this.newRelease();\n    \n    this.on();\n  }\n\n  NeuroBind.Events = \n  {\n    Database: 'updated',\n    Model: 'saved removed remote-update relation-update',\n    Collection: 'add adds sort remove reset',\n    Page: 'change',\n    Scope: '$destroy'\n  };\n\n  NeuroBind.prototype = \n  {\n    on: function()\n    {\n      if ( Neuro.isNeuro( this.target ) )\n      {\n        this.target = this.target.Database;\n      }\n\n      if ( this.target instanceof Neuro.Database )\n      {\n        this.target.on( NeuroBind.Events.Database, this.notify  );\n      }\n      else if ( this.target instanceof Neuro.Model )\n      {\n        this.target.$on( NeuroBind.Events.Model, this.notify );\n      }\n      else if ( this.target instanceof Neuro.Collection )\n      {\n        this.target.on( NeuroBind.Events.Collection, this.notify );\n      }\n      else if ( this.target instanceof Neuro.Page )\n      {\n        this.target.on( NeuroBind.Events.Page, this.notify );\n      }\n\n      this.scope.$on( NeuroBind.Events.Scope, this.release );\n    },\n    off: function()\n    {\n      if ( this.target instanceof Neuro.Database )\n      {\n        this.target.off( NeuroBind.Events.Database, this.notify );\n      }\n      else if ( this.target instanceof Neuro.Model )\n      {\n        this.target.$off( NeuroBind.Events.Model, this.notify );\n      }\n      else if ( this.target instanceof Neuro.Collection )\n      {\n        this.target.off( NeuroBind.Events.Collection, this.notify );\n      }\n      else if ( this.target instanceof Neuro.Page )\n      {\n        this.target.off( NeuroBind.Events.Page, this.notify );\n      }\n    },\n    newRelease: function()\n    {\n      var binder = this;\n\n      return function()\n      {\n        binder.off();\n      };\n    },\n    newNotification: function()\n    {\n      var binder = this;\n\n      return function()\n      {\n        binder.scope.$evalAsync(function()\n        {\n          if ( binder.callback )\n          {\n            binder.callback.apply( binder.target );\n          }\n\n          if ( NeuroSettings.debug )\n          {\n            Neuro.debug( '[Scope:$evalAsync]', binder.scope );\n          }\n        });\n      };\n    }\n  };\n\n  NeuroResolve.factory = function( name, callback )\n  {\n    return ['$q', function resolve($q) {\n      var defer = $q.defer();\n\n      Neuro.get( name, function(model) \n      {\n        callback( model, defer );\n      });\n\n      return defer.promise;\n    }];\n  };\n\n  NeuroResolve.model = function( name, input )\n  {\n    return NeuroResolve.factory( name, function(model, defer) \n    {\n      model.grabModel( input, function(instance) \n      {\n        if ( instance ) {\n          defer.resolve( instance );\n        } else {\n          defer.reject();\n        }\n      });\n    });\n  };\n\n  NeuroResolve.fetch = function( name, input )\n  {\n    return NeuroResolve.factory( name, function(model, defer) \n    {\n      defer.resolve( model.fetch( input ) );\n    });\n  };\n\n  NeuroResolve.query = function( name, query )\n  {\n    return NeuroResolve.factory( name, function(model, defer)\n    {\n      var remoteQuery = model.query( query );\n\n      remoteQuery.success(function() \n      {\n        defer.resolve( remoteQuery );\n      });\n\n      remoteQuery.failure(function() \n      {\n        defer.reject();\n      });\n    });\n  };\n\n  NeuroResolve.all = function( name )\n  {\n    return NeuroResolve.factory( name, function(model, defer)\n    {\n      model.Database.ready(function() \n      {\n        defer.resolve( model.all() );\n      });\n    });\n  };\n\n  NeuroResolve.where = function( name, whereProperties, whereValue, whereEquals )\n  {\n    return NeuroResolve.factory( name, function(model, defer)\n    {\n      model.Database.ready(function() \n      {\n        defer.resolve( model.all().filtered( whereProperties, whereValue, whereEquals ) );\n      });\n    });\n  };\n\n})( angular.module('neurosync', []), window );"],"sourceRoot":"/source/"}