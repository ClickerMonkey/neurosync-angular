{"version":3,"sources":["neurosync-angular.js"],"names":["app","global","undefined","NeuroFactory","$http","Neuro","rest","database","execute","method","data","url","success","failure","offlineValue","onRestSuccess","response","onRestError","status","debug","Debugs","REST","this","forceOffline","options","then","all","api","get","model","$key","create","encoded","update","remove","query","Neuro_debug","NeuroSettings","apply","arguments","ScopeEval","listenToNetworkStatus","NeuroBindFactory","NeuroBind","NeuroSelectFactory","NeuroSelect","scope","target","callback","notify","newNotification","release","newRelease","on","source","select","fill","$onRemove","copyFunction","$handleRemove","$onRemoves","$handleRemoves","$onCleared","$handleCleared","$onReset","$handleReset","$reset","$select","buildTemplate","template","params","replace","TEMPLATE_REGEX","match","prop","hasModule","moduleName","tested","angular","module","e","getRouteParameter","cached","buildParamResolver","$stateParams","$route","current","buildTemplateResolver","routeParams","text","isString","NeuroResolve","constant","factory","Events","Database","Model","Collection","Page","Scope","prototype","isNeuro","$on","off","$off","binder","$evalAsync","$source","$disconnect","$connect","Remove","Removes","Cleared","Reset","isArray","db","key","i","length","buildKeyFromInput","keys","$selection","out","selection","push","removed","has","ModelCollection","selectable","name","param","paramResolver","$q","routing","defer","templateResolver","promise","splice","input","grabModel","instance","resolve","reject","fetch","fetchAll","models","properties","dontSave","remoteQuery","ready","where","whereProperties","whereValue","whereEquals","isObject","filtered","window"],"mappings":"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","file":"neurosync-angular.min.js","sourcesContent":["(function (app, global, undefined)\n{\n\n  var NeuroSettings = {\n    debug: false\n  };\n\n  var NeuroResolve = {\n\n  };\n\n  app\n    .constant( 'NeuroResolve', NeuroResolve )\n    .constant( 'NeuroSettings', NeuroSettings )\n    .factory( 'Neuro', ['$http', NeuroFactory] )\n    .factory( 'NeuroBind', NeuroBindFactory )\n    .factory( 'NeuroSelect', NeuroSelectFactory )\n  ;\n\n  global.NeuroBind = NeuroBind;\n  global.NeuroResolve = NeuroResolve;\n  global.NeuroSelect = NeuroSelect;\n\n  function NeuroFactory($http)\n  {\n\n    Neuro.rest = function(database)\n    {\n\n      function execute( method, data, url, success, failure, offlineValue )\n      {\n        Neuro.debug( Neuro.Debugs.REST, this, method, url, data );\n\n        if ( Neuro.forceOffline )\n        {\n          failure( offlineValue, 0 );\n        }\n        else\n        {\n          function onRestSuccess(response) \n          {\n            success( response.data );\n          }\n\n          function onRestError(response) \n          {\n            failure( response.data, response.status );\n          }\n\n          var options = \n          {\n            method: method,\n            data: data,\n            url: url\n          };\n\n          $http( options ).then( onRestSuccess, onRestError );\n        }\n      }\n      \n      return {\n        all: function( success, failure )\n        {\n          execute( 'GET', undefined, database.api, success, failure, [] );\n        },\n        get: function( model, success, failure )\n        {\n          execute( 'GET', undefined, database.api + model.$key(), success, failure );\n        },\n        create: function( model, encoded, success, failure )\n        {\n          execute( 'POST', encoded, database.api, success, failure, {} );\n        },\n        update: function( model, encoded, success, failure )\n        {\n          execute( 'PUT', encoded, database.api + model.$key(), success, failure, {} );\n        },\n        remove: function( model, success, failure )\n        {\n          execute( 'DELETE', undefined, database.api + model.$key(), success, failure, {} );\n        },\n        query: function( query, success, failure )\n        {\n          var method = query.method || 'GET';\n          var data = query.data || undefined;\n          var url = query.url || query;\n\n          execute( method, data, url, success, failure );\n        }\n      };\n\n    };\n\n    var Neuro_debug = Neuro.debug;\n\n    Neuro.debug = function()\n    {\n      if ( NeuroSettings.debug )\n      {\n        Neuro_debug.apply( this, arguments );\n      }\n    };\n\n    Neuro.Debugs.ScopeEval = 100000;\n\n    Neuro.listenToNetworkStatus();\n\n    return Neuro;\n  }\n\n  function NeuroBindFactory()\n  {\n    return NeuroBind;\n  }\n\n  function NeuroSelectFactory()\n  {\n    return NeuroSelect;\n  }\n\n  function NeuroBind( scope, target, callback )\n  {\n    if ( !(this instanceof NeuroBind) ) return new NeuroBind( scope, target, callback );\n\n    this.scope = scope;\n    this.target = target;\n    this.callback = callback;\n\n    this.notify = this.newNotification();\n    this.release = this.newRelease();\n    \n    this.on();\n  }\n\n  NeuroBind.Events = \n  {\n    Database:     'updated',\n    Model:        'saved removed remote-update relation-update',\n    Collection:   'add adds sort remove reset',\n    Page:         'change',\n    Scope:        '$destroy'\n  };\n\n  NeuroBind.prototype = \n  {\n    on: function()\n    {\n      if ( Neuro.isNeuro( this.target ) )\n      {\n        this.target = this.target.Database;\n      }\n\n      if ( this.target instanceof Neuro.Database )\n      {\n        this.target.on( NeuroBind.Events.Database, this.notify  );\n      }\n      else if ( this.target instanceof Neuro.Model )\n      {\n        this.target.$on( NeuroBind.Events.Model, this.notify );\n      }\n      else if ( this.target instanceof Neuro.Collection )\n      {\n        this.target.on( NeuroBind.Events.Collection, this.notify );\n      }\n      else if ( this.target instanceof Neuro.Page )\n      {\n        this.target.on( NeuroBind.Events.Page, this.notify );\n      }\n\n      this.scope.$on( NeuroBind.Events.Scope, this.release );\n    },\n    off: function()\n    {\n      if ( this.target instanceof Neuro.Database )\n      {\n        this.target.off( NeuroBind.Events.Database, this.notify );\n      }\n      else if ( this.target instanceof Neuro.Model )\n      {\n        this.target.$off( NeuroBind.Events.Model, this.notify );\n      }\n      else if ( this.target instanceof Neuro.Collection )\n      {\n        this.target.off( NeuroBind.Events.Collection, this.notify );\n      }\n      else if ( this.target instanceof Neuro.Page )\n      {\n        this.target.off( NeuroBind.Events.Page, this.notify );\n      }\n    },\n    newRelease: function()\n    {\n      var binder = this;\n\n      return function()\n      {\n        binder.off();\n      };\n    },\n    newNotification: function()\n    {\n      var binder = this;\n\n      return function()\n      {\n        binder.scope.$evalAsync(function()\n        {\n          if ( binder.callback )\n          {\n            binder.callback.apply( binder.target );\n          }\n\n          if ( NeuroSettings.debug )\n          {\n            Neuro.debug( '[Scope:$evalAsync]', binder.scope );\n          }\n        });\n      };\n    }\n  };\n\n  function NeuroSelect(source, select, fill)\n  {\n    this.$onRemove = Neuro.copyFunction( this.$handleRemove );\n    this.$onRemoves = Neuro.copyFunction( this.$handleRemoves );\n    this.$onCleared = Neuro.copyFunction( this.$handleCleared );\n    this.$onReset = Neuro.copyFunction( this.$handleReset );\n\n    this.$reset( source );\n    this.$select( select, fill );\n  }\n\n  NeuroSelect.prototype = \n  {\n\n    $reset: function(source)\n    {\n      if ( this.$source !== source )\n      {\n        if ( this.$source )\n        {\n          this.$disconnect();\n        }\n\n        this.$source = source;\n        this.$connect();\n      }\n    },\n\n    $connect: function()\n    {\n      this.$source.on( Neuro.Collection.Events.Remove, this.$onRemove, this );\n      this.$source.on( Neuro.Collection.Events.Removes, this.$onRemoves, this );\n      this.$source.on( Neuro.Collection.Events.Cleared, this.$onCleared, this );\n      this.$source.on( Neuro.Collection.Events.Reset, this.$onReset, this );\n    },\n\n    $disconnect: function()\n    {\n      this.$source.off( Neuro.Collection.Events.Remove, this.$onRemove );\n      this.$source.off( Neuro.Collection.Events.Removes, this.$onRemoves );\n      this.$source.off( Neuro.Collection.Events.Cleared, this.$onCleared );\n      this.$source.off( Neuro.Collection.Events.Reset, this.$onReset );\n    },\n\n    $select: function(select, fill)\n    {\n      if ( Neuro.isArray( select ) )\n      {\n        var db = this.$source.database;\n        var remove = {};\n\n        for (var key in this)\n        {\n          if ( typeof this[ key ] === 'boolean' )\n          {\n            remove[ key ] = this[ key ];\n          }\n        }\n\n        for (var i = 0; i < select.length; i++)\n        {\n          var key = db.buildKeyFromInput( select[ i ] );\n\n          this[ key ] = true;\n\n          delete remove[ key ];\n        }\n\n        for (var key in remove)\n        {\n          delete this[ key ];\n        }\n\n        if ( fill )\n        {\n          var keys = this.$source.keys();\n\n          for (var i = 0; i < keys.length; i++)\n          {\n            var key = keys[ i ];\n\n            if ( !this[ key ] )\n            {\n              this[ key ] = false;\n            }\n          }\n        }\n\n      }\n    },\n\n    $selection: function(out)\n    {\n      var source = this.$source;\n      var selection = out || [];\n\n      for (var key in this)\n      {\n        if ( this[ key ] === true )\n        {\n          var model = source.get( key );\n\n          if ( model )\n          {\n            selection.push( model );\n          }\n        }\n      }\n\n      return selection;\n    },\n\n    $handleRemove: function(removed)\n    {\n      var db = this.$source.database;\n      var key = db.buildKeyFromInput( removed );\n\n      delete this[ key ];\n    },\n\n    $handleRemoves: function(removed)\n    {\n      for (var i = 0; i < removed.length; i++)\n      {\n        this.$handleRemove( removed[i] );\n      }\n    },\n\n    $handleCleared: function()\n    {\n      for (var key in this)\n      {\n        if ( typeof this[ key ] === 'boolean' )\n        {\n          delete this[ key ];\n        }\n      }\n    },\n\n    $handleReset: function()\n    {\n      var source = this.$source;\n\n      for (var key in this)\n      {\n        if ( typeof this[ key ] === 'boolean' )\n        {\n          if ( !source.has( key ) )\n          {\n            delete this[ key ];\n          }\n        }\n      }\n    }\n  };\n\n  Neuro.ModelCollection.prototype.selectable = function(select, fill)\n  {\n    return new NeuroSelect( this, select, fill );\n  };\n\n  var TEMPLATE_REGEX = /\\{([^\\}]+)\\}/;\n\n  function buildTemplate(template, params)\n  {\n    return template.replace( TEMPLATE_REGEX, function(match, prop)\n    {\n      return prop in params ? params[ prop ] : '';\n    });\n  }\n\n  function hasModule(moduleName)\n  {\n    if ( moduleName in hasModule.tested )\n    {\n      return hasModule.tested[ moduleName ];\n    }\n\n    try\n    {\n      angular.module( moduleName );\n\n      return hasModule.tested[ moduleName ] = true;\n    }\n    catch (e)\n    {\n      return hasModule.tested[ moduleName ] = false;\n    }\n  }\n\n  hasModule.tested = {};\n\n  function getRouteParameter()\n  {\n    return getRouteParameter.cached ? getRouteParameter.cached : getRouteParameter.cached = \n      ( hasModule( 'ui.router' ) ? '$stateParams' : \n        ( hasModule( 'ngRoute' ) ? '$route' : \n          false ) );\n  }\n\n  function buildParamResolver()\n  {\n    if ( hasModule( 'ui.router') )\n    {\n      return function($stateParams)\n      {\n        return $stateParams;\n      };\n    }\n    else if ( hasModule( 'ngRoute') )\n    {\n      return function($route)\n      {\n        return $route.current;\n      };\n    }\n    return function()\n    {\n      return false;\n    };\n  }\n\n  function buildTemplateResolver(routeParams)\n  {\n    return function(text) \n    {\n      if (Neuro.isString( text ) && routeParams ) \n      {\n        return buildTemplate( text, routeParams );\n      }\n\n      return text;\n    };\n  }\n\n  getRouteParameter.cached = null;\n\n  NeuroResolve.factory = function( name, callback )\n  {\n    var param = getRouteParameter();\n    var paramResolver = buildParamResolver();\n\n    var factory = ['$q', function resolve($q, routing) \n    {\n      var defer = $q.defer();\n      var routeParams = paramResolver( routing );\n      var templateResolver = buildTemplateResolver( routeParams );\n\n      Neuro.get( name, function(model) \n      {\n        callback( model, defer, templateResolver );\n      });\n\n      return defer.promise;\n    }];\n\n    if ( param ) \n    {\n      factory.splice( 1, 0, param );\n    }\n\n    return factory;\n  };\n\n  NeuroResolve.model = function( name, input )\n  {\n    return NeuroResolve.factory( name, function(model, defer, templateResolver) \n    {\n      model.Database.grabModel( templateResolver( input ), function(instance) \n      {\n        if ( instance ) {\n          defer.resolve( instance );\n        } else {\n          defer.reject();\n        }\n      });\n    });\n  };\n\n  NeuroResolve.fetch = function( name, input )\n  {\n    return NeuroResolve.factory( name, function(model, defer, templateResolver) \n    {\n      defer.resolve( model.fetch( templateResolver( input ) ) );\n    });\n  };\n\n  NeuroResolve.fetchAll = function( name )\n  {\n    return NeuroResolve.factory( name, function(model, defer, templateResolver) \n    {\n      model.fetchAll(function(models)\n      {\n        defer.resolve( models );\n      });\n    });\n  };\n\n  NeuroResolve.create = function( name, properties, dontSave )\n  {\n    return NeuroResolve.factory( name, function(model, defer, templateResolver) \n    {\n      if ( dontSave )\n      {\n        defer.resolve( new model( properties ) );\n      }\n      else\n      {\n        defer.resolve( model.create( properties ) );\n      }\n    });\n  };\n\n  NeuroResolve.query = function( name, query )\n  {\n    return NeuroResolve.factory( name, function(model, defer, templateResolver)\n    {\n      var remoteQuery = model.query( templateResolver( query ) );\n\n      remoteQuery.success(function() \n      {\n        defer.resolve( remoteQuery );\n      });\n\n      remoteQuery.failure(function() \n      {\n        defer.reject();\n      });\n    });\n  };\n\n  NeuroResolve.all = function( name )\n  {\n    return NeuroResolve.factory( name, function(model, defer, templateResolver)\n    {\n      model.Database.ready(function() \n      {\n        defer.resolve( model.all() );\n      });\n    });\n  };\n\n  NeuroResolve.where = function( name, whereProperties, whereValue, whereEquals )\n  {\n    return NeuroResolve.factory( name, function(model, defer, templateResolver)\n    {\n      if ( Neuro.isObject( whereProperties ) )\n      {\n        for (var prop in whereProperties)\n        {\n          whereProperties[ prop ] = templateResolver( whereProperties[ prop ] );\n        }\n      }\n      if ( Neuro.isString( whereValue ) )\n      {\n        whereValue = templateResolver( whereValue );\n      }\n\n      model.Database.ready(function() \n      {\n        defer.resolve( model.all().filtered( whereProperties, whereValue, whereEquals ) );\n      });\n    });\n  };\n\n})( angular.module('neurosync', []), window );"],"sourceRoot":"/source/"}