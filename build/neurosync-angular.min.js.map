{"version":3,"sources":["neurosync-angular.js"],"names":["app","global","undefined","InitializeNeuro","$http","Neuro_debug","Neuro","debug","restSet","rest","database","removeTrailingSlash","x","charAt","length","substring","execute","method","data","url","success","failure","offlineValue","onRestSuccess","response","onRestError","status","Debugs","REST","this","forceOffline","options","then","all","api","get","model","$key","create","encoded","update","remove","query","NeuroSettings","apply","arguments","ScopeEval","listenToNetworkStatus","NeuroBind","scope","target","callback","notify","newNotification","release","newRelease","on","NeuroSelect","source","select","fill","$onRemove","bind","$handleRemove","$onRemoves","$handleRemoves","$onCleared","$handleCleared","$onReset","$handleReset","$reset","$select","hasModule","moduleName","tested","angular","module","e","getRouteParameter","cached","buildParamResolver","$stateParams","$route","current","buildTemplateResolver","routeParams","text","isString","format","NeuroResolve","constant","run","Events","Database","Model","Collection","Page","Scope","prototype","isNeuro","$on","off","$off","binder","$evalAsync","$source","$disconnect","$connect","Remove","Removes","Cleared","Reset","isArray","db","key","isBoolean","i","buildKeyFromInput","keys","$selection","out","selection","push","removed","has","ModelCollection","selectable","factory","name","$q","routing","defer","cachedValue","resolve","paramResolver","templateResolver","cache","promise","resolvedValue","param","$inject","inject","arg","input","grabModel","instance","reject","fetch","buildObjectFromKey","isObject","$set","$once","RemoteGets","$refresh","fetchAll","models","properties","dontSave","$isSaved","RemoteSaves","remoteQuery","ready","where","whereProperties","whereValue","whereEquals","prop","filtered"],"mappings":"CAAA,SAAAA,EAAAC,EAAAC,GAwBA,QAAAC,GAAAC,GAEA,GAAAC,GAAAC,MAAAC,KAEAD,OAAAE,UAEAF,MAAAG,KAAA,SAAAC,GAEA,QAAAC,GAAAC,GAEA,MAAA,MAAAA,EAAAC,OAAAD,EAAAE,OAAA,GAAAF,EAAAG,UAAA,EAAAH,EAAAE,OAAA,GAAAF,EAGA,QAAAI,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAUA,QAAAC,GAAAC,GAEAJ,EAAAI,EAAAN,MAGA,QAAAO,GAAAD,GAEAH,EAAAG,EAAAN,KAAAM,EAAAE,QAbA,GAFApB,MAAAC,MAAAD,MAAAqB,OAAAC,KAAAC,KAAAZ,EAAAE,EAAAD,GAEAZ,MAAAwB,aAEAT,EAAAC,EAAA,OAGA,CAWA,GAAAS,IAEAd,OAAAA,EACAC,KAAAA,EACAC,IAAAA,EAGAf,GAAA2B,GAAAC,KAAAT,EAAAE,IAIA,OACAQ,IAAA,SAAAb,EAAAC,GAEAL,EAAA,MAAAd,EAAAQ,EAAAwB,IAAAd,EAAAC,OAEAc,IAAA,SAAAC,EAAAhB,EAAAC,GAEAL,EAAA,MAAAd,EAAAS,EAAAD,EAAAwB,IAAAE,EAAAC,QAAAjB,EAAAC,IAEAiB,OAAA,SAAAF,EAAAG,EAAAnB,EAAAC,GAEAL,EAAA,OAAAuB,EAAA5B,EAAAD,EAAAwB,KAAAd,EAAAC,OAEAmB,OAAA,SAAAJ,EAAAG,EAAAnB,EAAAC,GAEAL,EAAA,MAAAuB,EAAA5B,EAAAD,EAAAwB,IAAAE,EAAAC,QAAAjB,EAAAC,OAEAoB,OAAA,SAAAL,EAAAhB,EAAAC,GAEAL,EAAA,SAAAd,EAAAS,EAAAD,EAAAwB,IAAAE,EAAAC,QAAAjB,EAAAC,OAEAqB,MAAA,SAAAA,EAAAtB,EAAAC,GAEA,GAAAJ,GAAAyB,EAAAzB,QAAA,MACAC,EAAAwB,EAAAxB,MAAAhB,EACAiB,EAAAuB,EAAAvB,KAAAuB,CAEA1B,GAAAC,EAAAC,EAAAC,EAAAC,EAAAC,MAMAf,MAAAE,SAAA,GAGAF,MAAAC,MAAA,WAEAoC,EAAApC,OAEAF,EAAAuC,MAAAf,KAAAgB,YAIAvC,MAAAqB,OAAAmB,UAAA,IAEAxC,MAAAyC,wBAGA,QAAAC,GAAAC,EAAAC,EAAAC,GAEA,MAAAtB,gBAAAmB,IAEAnB,KAAAoB,MAAAA,EACApB,KAAAqB,OAAAA,EACArB,KAAAsB,SAAAA,EAEAtB,KAAAuB,OAAAvB,KAAAwB,kBACAxB,KAAAyB,QAAAzB,KAAA0B,iBAEA1B,MAAA2B,MATA,GAAAR,GAAAC,EAAAC,EAAAC,GAmGA,QAAAM,GAAAC,EAAAC,EAAAC,GAEA/B,KAAAgC,UAAAvD,MAAAwD,KAAAjC,KAAAA,KAAAkC,eACAlC,KAAAmC,WAAA1D,MAAAwD,KAAAjC,KAAAA,KAAAoC,gBACApC,KAAAqC,WAAA5D,MAAAwD,KAAAjC,KAAAA,KAAAsC,gBACAtC,KAAAuC,SAAA9D,MAAAwD,KAAAjC,KAAAA,KAAAwC,cAEAxC,KAAAyC,OAAAZ,GACA7B,KAAA0C,QAAAZ,EAAAC,GAyJA,QAAAY,GAAAC,GAEA,GAAAA,IAAAD,GAAAE,OAEA,MAAAF,GAAAE,OAAAD,EAGA,KAIA,MAFAE,SAAAC,OAAAH,GAEAD,EAAAE,OAAAD,IAAA,EAEA,MAAAI,GAEA,MAAAL,GAAAE,OAAAD,IAAA,GAMA,QAAAK,KAEA,MAAAA,GAAAC,OAAAD,EAAAC,OAAAD,EAAAC,OACAP,EAAA,aAAA,eACAA,EAAA,WAAA,UACA,EAGA,QAAAQ,KAEA,MAAAR,GAAA,aAEA,SAAAS,GAEA,MAAAA,IAGAT,EAAA,WAEA,SAAAU,GAEA,MAAAA,GAAAC,SAGA,WAEA,OAAA,GAIA,QAAAC,GAAAC,GAEA,MAAA,UAAAC,GAEA,MAAAhF,OAAAiF,SAAAD,IAAAD,EAEA/E,MAAAkF,OAAAF,EAAAD,GAGAC,GApbA,GAAA3C,IACApC,OAAA,GAGAkF,IAIAzF,GACA0F,SAAA,gBAAA/C,GACA+C,SAAA,QAAApF,OACAoF,SAAA,YAAA1C,GACA0C,SAAA,eAAAD,GACAC,SAAA,cAAAjC,GACAkC,KAAA,QAAAxF,IAGAF,EAAA+C,UAAAA,EACA/C,EAAAwF,aAAAA,EACAxF,EAAAwD,YAAAA,EA6GAT,EAAA4C,QAEAC,SAAA,UACAC,MAAA,8CACAC,WAAA,6BACAC,KAAA,SACAC,MAAA,YAGAjD,EAAAkD,WAEA1C,GAAA,WAEAlD,MAAA6F,QAAAtE,KAAAqB,UAEArB,KAAAqB,OAAArB,KAAAqB,OAAA2C,UAGAhE,KAAAqB,iBAAA5C,OAAAuF,SAEAhE,KAAAqB,OAAAM,GAAAR,EAAA4C,OAAAC,SAAAhE,KAAAuB,QAEAvB,KAAAqB,iBAAA5C,OAAAwF,MAEAjE,KAAAqB,OAAAkD,IAAApD,EAAA4C,OAAAE,MAAAjE,KAAAuB,QAEAvB,KAAAqB,iBAAA5C,OAAAyF,WAEAlE,KAAAqB,OAAAM,GAAAR,EAAA4C,OAAAG,WAAAlE,KAAAuB,QAEAvB,KAAAqB,iBAAA5C,OAAA0F,MAEAnE,KAAAqB,OAAAM,GAAAR,EAAA4C,OAAAI,KAAAnE,KAAAuB,QAGAvB,KAAAoB,MAAAmD,IAAApD,EAAA4C,OAAAK,MAAApE,KAAAyB,UAEA+C,IAAA,WAEAxE,KAAAqB,iBAAA5C,OAAAuF,SAEAhE,KAAAqB,OAAAmD,IAAArD,EAAA4C,OAAAC,SAAAhE,KAAAuB,QAEAvB,KAAAqB,iBAAA5C,OAAAwF,MAEAjE,KAAAqB,OAAAoD,KAAAtD,EAAA4C,OAAAE,MAAAjE,KAAAuB,QAEAvB,KAAAqB,iBAAA5C,OAAAyF,WAEAlE,KAAAqB,OAAAmD,IAAArD,EAAA4C,OAAAG,WAAAlE,KAAAuB,QAEAvB,KAAAqB,iBAAA5C,OAAA0F,MAEAnE,KAAAqB,OAAAmD,IAAArD,EAAA4C,OAAAI,KAAAnE,KAAAuB,SAGAG,WAAA,WAEA,GAAAgD,GAAA1E,IAEA,OAAA,YAEA0E,EAAAF,QAGAhD,gBAAA,WAEA,GAAAkD,GAAA1E,IAEA,OAAA,YAEA0E,EAAAtD,MAAAuD,WAAA,WAEAD,EAAApD,UAEAoD,EAAApD,SAAAP,MAAA2D,EAAArD,QAGAP,EAAApC,OAEAD,MAAAC,MAAA,qBAAAgG,EAAAtD,YAkBAQ,EAAAyC,WAGA5B,OAAA,SAAAZ,GAEA7B,KAAA4E,UAAA/C,IAEA7B,KAAA4E,SAEA5E,KAAA6E,cAGA7E,KAAA4E,QAAA/C,EACA7B,KAAA8E,aAIAA,SAAA,WAEA9E,KAAA4E,QAAAjD,GAAAlD,MAAAyF,WAAAH,OAAAgB,OAAA/E,KAAAgC,WACAhC,KAAA4E,QAAAjD,GAAAlD,MAAAyF,WAAAH,OAAAiB,QAAAhF,KAAAmC,YACAnC,KAAA4E,QAAAjD,GAAAlD,MAAAyF,WAAAH,OAAAkB,QAAAjF,KAAAqC,YACArC,KAAA4E,QAAAjD,GAAAlD,MAAAyF,WAAAH,OAAAmB,MAAAlF,KAAAuC,WAGAsC,YAAA,WAEA7E,KAAA4E,QAAAJ,IAAA/F,MAAAyF,WAAAH,OAAAgB,OAAA/E,KAAAgC,WACAhC,KAAA4E,QAAAJ,IAAA/F,MAAAyF,WAAAH,OAAAiB,QAAAhF,KAAAmC,YACAnC,KAAA4E,QAAAJ,IAAA/F,MAAAyF,WAAAH,OAAAkB,QAAAjF,KAAAqC,YACArC,KAAA4E,QAAAJ,IAAA/F,MAAAyF,WAAAH,OAAAmB,MAAAlF,KAAAuC,WAGAG,QAAA,SAAAZ,EAAAC,GAEA,GAAAtD,MAAA0G,QAAArD,GACA,CACA,GAAAsD,GAAApF,KAAA4E,QAAA/F,SACA+B,IAEA,KAAA,GAAAyE,KAAArF,MAEAvB,MAAA6G,UAAAtF,KAAAqF,MAEAzE,EAAAyE,GAAArF,KAAAqF,GAIA,KAAA,GAAAE,GAAA,EAAAA,EAAAzD,EAAA7C,OAAAsG,IACA,CACA,GAAAF,GAAAD,EAAAI,kBAAA1D,EAAAyD,GAEAvF,MAAAqF,IAAA,QAEAzE,GAAAyE,GAGA,IAAA,GAAAA,KAAAzE,SAEAZ,MAAAqF,EAGA,IAAAtD,EAIA,IAAA,GAFA0D,GAAAzF,KAAA4E,QAAAa,OAEAF,EAAA,EAAAA,EAAAE,EAAAxG,OAAAsG,IACA,CACA,GAAAF,GAAAI,EAAAF,EAEAvF,MAAAqF,KAEArF,KAAAqF,IAAA,MAQAK,WAAA,SAAAC,GAEA,GAAA9D,GAAA7B,KAAA4E,QACAgB,EAAAD,KAEA,KAAA,GAAAN,KAAArF,MAEA,GAAAA,KAAAqF,MAAA,EACA,CACA,GAAA9E,GAAAsB,EAAAvB,IAAA+E,EAEA9E,IAEAqF,EAAAC,KAAAtF,GAKA,MAAAqF,IAGA1D,cAAA,SAAA4D,GAEA,GAAAV,GAAApF,KAAA4E,QAAA/F,SACAwG,EAAAD,EAAAI,kBAAAM,SAEA9F,MAAAqF,IAGAjD,eAAA,SAAA0D,GAEA,IAAA,GAAAP,GAAA,EAAAA,EAAAO,EAAA7G,OAAAsG,IAEAvF,KAAAkC,cAAA4D,EAAAP,KAIAjD,eAAA,WAEA,IAAA,GAAA+C,KAAArF,MAEAvB,MAAA6G,UAAAtF,KAAAqF,WAEArF,MAAAqF,IAKA7C,aAAA,WAEA,GAAAX,GAAA7B,KAAA4E,OAEA,KAAA,GAAAS,KAAArF,MAEAvB,MAAA6G,UAAAtF,KAAAqF,MAEAxD,EAAAkE,IAAAV,UAEArF,MAAAqF,MAOA5G,MAAAuH,gBAAA3B,UAAA4B,WAAA,SAAAnE,EAAAC,GAEA,MAAA,IAAAH,GAAA5B,KAAA8B,EAAAC,IAsBAY,EAAAE,UA6CAI,EAAAC,OAAA,KAEAU,EAAAsC,QAAA,SAAAC,EAAA7E,GAOA,QAAA4E,GAAAE,EAAAC,GAEA,GAAAC,GAAAF,EAAAE,OAEA,IAAA,SAAAC,EAEAD,EAAAE,QAAAD,OAGA,CACA,GAAA/C,GAAAiD,EAAAJ,GACAK,EAAAnD,EAAAC,EAEAmD,IAEAL,EAAAM,QAAAzG,KAAA,SAAA0G,GAEAN,EAAAM,IAIApI,MAAA6B,IAAA6F,EAAA,SAAA5F,GAEAe,EAAAf,EAAA+F,EAAAI,KAIA,MAAAJ,GAAAM,QAhCA,GAAAE,GAAA7D,IACAwD,EAAAtD,IACAwD,GAAA,EACAJ,EAAA,MAiEA,OAjCAL,GAAAa,SAAA,MAEAD,GAEAZ,EAAAa,QAAAlB,KAAAiB,GAGAZ,EAAAS,MAAA,WAIA,MAFAA,IAAA,EAEAT,GAGAA,EAAAc,OAAA,WAEA,IAAA,GAAAzB,GAAA,EAAAA,EAAAvE,UAAA/B,OAAAsG,IACA,CACA,GAAA0B,GAAAjG,UAAAuE,EAEA9G,OAAA0G,QAAA8B,GAEAf,EAAAa,QAAAlB,KAAA9E,MAAAmF,EAAAa,QAAAE,GAIAf,EAAAa,QAAAlB,KAAAoB,GAIA,MAAAf,IAGAA,GAGAtC,EAAArD,MAAA,SAAA4F,EAAAe,GAEA,MAAAtD,GAAAsC,QAAAC,EAAA,SAAA5F,EAAA+F,EAAAI,GAEAnG,EAAAyD,SAAAmD,UAAAT,EAAAQ,GAAA,SAAAE,GAEAA,EAEAd,EAAAE,QAAAY,GAIAd,EAAAe,cAMAzD,EAAA0D,MAAA,SAAAnB,EAAAe,GAEA,MAAAtD,GAAAsC,QAAAC,EAAA,SAAA5F,EAAA+F,EAAAI,GAEA,GAAAtB,GAAA7E,EAAAyD,SACAqB,EAAAD,EAAAI,kBAAAkB,EAAAQ,IACAE,EAAAhC,EAAA9E,IAAA+E,EAEA+B,KAEAA,EAAAhC,EAAAmC,mBAAAlC,GAEA5G,MAAA+I,SAAAN,IAEAE,EAAAK,KAAAP,IAIAE,EAAAM,MAAAjJ,MAAAwF,MAAAF,OAAA4D,WAAA,WAEArB,EAAAE,QAAAY,KAGAA,EAAAQ,cAIAhE,EAAAiE,SAAA,SAAA1B,GAEA,MAAAvC,GAAAsC,QAAAC,EAAA,SAAA5F,EAAA+F,EAAAI,GAEAnG,EAAAsH,SAAA,SAAAC,GAEAxB,EAAAE,QAAAsB,QAKAlE,EAAAnD,OAAA,SAAA0F,EAAA4B,EAAAC,GAEA,MAAApE,GAAAsC,QAAAC,EAAA,SAAA5F,EAAA+F,EAAAI,GAEA,GAAAsB,EAEA1B,EAAAE,QAAA,GAAAjG,GAAAwH,QAGA,CACA,GAAAX,GAAA7G,EAAAE,OAAAsH,EAEAX,GAAAa,WAEA3B,EAAAE,QAAAY,GAIAA,EAAAM,MAAAjJ,MAAAwF,MAAAF,OAAAmE,YAAA,WAEA5B,EAAAE,QAAAY,SAOAxD,EAAA/C,MAAA,SAAAsF,EAAAtF,GAEA,MAAA+C,GAAAsC,QAAAC,EAAA,SAAA5F,EAAA+F,EAAAI,GAEA,GAAAyB,GAAA5H,EAAAM,MAAA6F,EAAA7F,GAEAsH,GAAA5I,QAAA,WAEA+G,EAAAE,QAAA2B,KAGAA,EAAA3I,QAAA,WAEA8G,EAAAe,cAKAzD,EAAAxD,IAAA,SAAA+F,GAEA,MAAAvC,GAAAsC,QAAAC,EAAA,SAAA5F,EAAA+F,EAAAI,GAEAnG,EAAAyD,SAAAoE,MAAA,WAEA9B,EAAAE,QAAAjG,EAAAH,YAKAwD,EAAAyE,MAAA,SAAAlC,EAAAmC,EAAAC,EAAAC,GAEA,MAAA5E,GAAAsC,QAAAC,EAAA,SAAA5F,EAAA+F,EAAAI,GAEA,GAAAjI,MAAA+I,SAAAc,GAEA,IAAA,GAAAG,KAAAH,GAEAA,EAAAG,GAAA/B,EAAA4B,EAAAG,GAGAhK,OAAAiF,SAAA6E,KAEAA,EAAA7B,EAAA6B,IAGAhI,EAAAyD,SAAAoE,MAAA,WAEA9B,EAAAE,QAAAjG,EAAAH,MAAAsI,SAAAJ,EAAAC,EAAAC,UAKA1F,QAAAC,OAAA,gBAAA/C","file":"neurosync-angular.min.js","sourcesContent":["(function (app, global, undefined)\n{\n\n  var NeuroSettings = {\n    debug: false\n  };\n\n  var NeuroResolve = {\n\n  };\n\n  app\n    .constant( 'NeuroSettings', NeuroSettings )\n    .constant( 'Neuro', Neuro )\n    .constant( 'NeuroBind', NeuroBind )\n    .constant( 'NeuroResolve', NeuroResolve )\n    .constant( 'NeuroSelect', NeuroSelect )\n    .run( ['$http', InitializeNeuro] )\n  ;\n\n  global.NeuroBind = NeuroBind;\n  global.NeuroResolve = NeuroResolve;\n  global.NeuroSelect = NeuroSelect;\n\n  function InitializeNeuro($http)\n  {\n    var Neuro_debug = Neuro.debug;\n\n    if ( !Neuro.restSet )\n    {\n      Neuro.rest = function(database)\n      {\n        function removeTrailingSlash(x)\n        {\n          return x.charAt(x.length - 1) === '/' ? x.substring(0, x.length - 1) : x;\n        }\n\n        function execute( method, data, url, success, failure, offlineValue )\n        {\n          Neuro.debug( Neuro.Debugs.REST, this, method, url, data );\n\n          if ( Neuro.forceOffline )\n          {\n            failure( offlineValue, 0 );\n          }\n          else\n          {\n            function onRestSuccess(response) \n            {\n              success( response.data );\n            }\n\n            function onRestError(response) \n            {\n              failure( response.data, response.status );\n            }\n\n            var options = \n            {\n              method: method,\n              data: data,\n              url: url\n            };\n\n            $http( options ).then( onRestSuccess, onRestError );\n          }\n        }\n        \n        return {\n          all: function( success, failure )\n          {\n            execute( 'GET', undefined, database.api, success, failure, [] );\n          },\n          get: function( model, success, failure )\n          {\n            execute( 'GET', undefined, removeTrailingSlash( database.api + model.$key() ), success, failure );\n          },\n          create: function( model, encoded, success, failure )\n          {\n            execute( 'POST', encoded, removeTrailingSlash( database.api ), success, failure, {} );\n          },\n          update: function( model, encoded, success, failure )\n          {\n            execute( 'PUT', encoded, removeTrailingSlash( database.api + model.$key() ), success, failure, {} );\n          },\n          remove: function( model, success, failure )\n          {\n            execute( 'DELETE', undefined, removeTrailingSlash( database.api + model.$key() ), success, failure, {} );\n          },\n          query: function( query, success, failure )\n          {\n            var method = query.method || 'GET';\n            var data = query.data || undefined;\n            var url = query.url || query;\n\n            execute( method, data, url, success, failure );\n          }\n        };\n\n      };\n\n      Neuro.restSet = true;\n    }\n\n    Neuro.debug = function()\n    {\n      if ( NeuroSettings.debug )\n      {\n        Neuro_debug.apply( this, arguments );\n      }\n    };\n\n    Neuro.Debugs.ScopeEval = 100000;\n\n    Neuro.listenToNetworkStatus();\n  }\n\n  function NeuroBind( scope, target, callback )\n  {\n    if ( !(this instanceof NeuroBind) ) return new NeuroBind( scope, target, callback );\n\n    this.scope = scope;\n    this.target = target;\n    this.callback = callback;\n\n    this.notify = this.newNotification();\n    this.release = this.newRelease();\n    \n    this.on();\n  }\n\n  NeuroBind.Events = \n  {\n    Database:     'updated',\n    Model:        'saved removed remote-update relation-update',\n    Collection:   'add adds sort remove reset',\n    Page:         'change',\n    Scope:        '$destroy'\n  };\n\n  NeuroBind.prototype = \n  {\n    on: function()\n    {\n      if ( Neuro.isNeuro( this.target ) )\n      {\n        this.target = this.target.Database;\n      }\n\n      if ( this.target instanceof Neuro.Database )\n      {\n        this.target.on( NeuroBind.Events.Database, this.notify  );\n      }\n      else if ( this.target instanceof Neuro.Model )\n      {\n        this.target.$on( NeuroBind.Events.Model, this.notify );\n      }\n      else if ( this.target instanceof Neuro.Collection )\n      {\n        this.target.on( NeuroBind.Events.Collection, this.notify );\n      }\n      else if ( this.target instanceof Neuro.Page )\n      {\n        this.target.on( NeuroBind.Events.Page, this.notify );\n      }\n\n      this.scope.$on( NeuroBind.Events.Scope, this.release );\n    },\n    off: function()\n    {\n      if ( this.target instanceof Neuro.Database )\n      {\n        this.target.off( NeuroBind.Events.Database, this.notify );\n      }\n      else if ( this.target instanceof Neuro.Model )\n      {\n        this.target.$off( NeuroBind.Events.Model, this.notify );\n      }\n      else if ( this.target instanceof Neuro.Collection )\n      {\n        this.target.off( NeuroBind.Events.Collection, this.notify );\n      }\n      else if ( this.target instanceof Neuro.Page )\n      {\n        this.target.off( NeuroBind.Events.Page, this.notify );\n      }\n    },\n    newRelease: function()\n    {\n      var binder = this;\n\n      return function()\n      {\n        binder.off();\n      };\n    },\n    newNotification: function()\n    {\n      var binder = this;\n\n      return function()\n      {\n        binder.scope.$evalAsync(function()\n        {\n          if ( binder.callback )\n          {\n            binder.callback.apply( binder.target );\n          }\n\n          if ( NeuroSettings.debug )\n          {\n            Neuro.debug( '[Scope:$evalAsync]', binder.scope );\n          }\n        });\n      };\n    }\n  };\n\n  function NeuroSelect(source, select, fill)\n  {\n    this.$onRemove  = Neuro.bind( this, this.$handleRemove );\n    this.$onRemoves = Neuro.bind( this, this.$handleRemoves );\n    this.$onCleared = Neuro.bind( this, this.$handleCleared );\n    this.$onReset   = Neuro.bind( this, this.$handleReset );\n\n    this.$reset( source );\n    this.$select( select, fill );\n  }\n\n  NeuroSelect.prototype = \n  {\n\n    $reset: function(source)\n    {\n      if ( this.$source !== source )\n      {\n        if ( this.$source )\n        {\n          this.$disconnect();\n        }\n\n        this.$source = source;\n        this.$connect();\n      }\n    },\n\n    $connect: function()\n    {\n      this.$source.on( Neuro.Collection.Events.Remove, this.$onRemove );\n      this.$source.on( Neuro.Collection.Events.Removes, this.$onRemoves );\n      this.$source.on( Neuro.Collection.Events.Cleared, this.$onCleared );\n      this.$source.on( Neuro.Collection.Events.Reset, this.$onReset );\n    },\n\n    $disconnect: function()\n    {\n      this.$source.off( Neuro.Collection.Events.Remove, this.$onRemove );\n      this.$source.off( Neuro.Collection.Events.Removes, this.$onRemoves );\n      this.$source.off( Neuro.Collection.Events.Cleared, this.$onCleared );\n      this.$source.off( Neuro.Collection.Events.Reset, this.$onReset );\n    },\n\n    $select: function(select, fill)\n    {\n      if ( Neuro.isArray( select ) )\n      {\n        var db = this.$source.database;\n        var remove = {};\n\n        for (var key in this)\n        {\n          if ( Neuro.isBoolean( this[ key ] ) )\n          {\n            remove[ key ] = this[ key ];\n          }\n        }\n\n        for (var i = 0; i < select.length; i++)\n        {\n          var key = db.buildKeyFromInput( select[ i ] );\n\n          this[ key ] = true;\n\n          delete remove[ key ];\n        }\n\n        for (var key in remove)\n        {\n          delete this[ key ];\n        }\n\n        if ( fill )\n        {\n          var keys = this.$source.keys();\n\n          for (var i = 0; i < keys.length; i++)\n          {\n            var key = keys[ i ];\n\n            if ( !this[ key ] )\n            {\n              this[ key ] = false;\n            }\n          }\n        }\n\n      }\n    },\n\n    $selection: function(out)\n    {\n      var source = this.$source;\n      var selection = out || [];\n\n      for (var key in this)\n      {\n        if ( this[ key ] === true )\n        {\n          var model = source.get( key );\n\n          if ( model )\n          {\n            selection.push( model );\n          }\n        }\n      }\n\n      return selection;\n    },\n\n    $handleRemove: function(removed)\n    {\n      var db = this.$source.database;\n      var key = db.buildKeyFromInput( removed );\n\n      delete this[ key ];\n    },\n\n    $handleRemoves: function(removed)\n    {\n      for (var i = 0; i < removed.length; i++)\n      {\n        this.$handleRemove( removed[i] );\n      }\n    },\n\n    $handleCleared: function()\n    {\n      for (var key in this)\n      {\n        if ( Neuro.isBoolean( this[ key ] ) )\n        {\n          delete this[ key ];\n        }\n      }\n    },\n\n    $handleReset: function()\n    {\n      var source = this.$source;\n\n      for (var key in this)\n      {\n        if ( Neuro.isBoolean( this[ key ] ) )\n        {\n          if ( !source.has( key ) )\n          {\n            delete this[ key ];\n          }\n        }\n      }\n    }\n  };\n\n  Neuro.ModelCollection.prototype.selectable = function(select, fill)\n  {\n    return new NeuroSelect( this, select, fill );\n  };\n\n  function hasModule(moduleName)\n  {\n    if ( moduleName in hasModule.tested )\n    {\n      return hasModule.tested[ moduleName ];\n    }\n\n    try\n    {\n      angular.module( moduleName );\n\n      return hasModule.tested[ moduleName ] = true;\n    }\n    catch (e)\n    {\n      return hasModule.tested[ moduleName ] = false;\n    }\n  }\n\n  hasModule.tested = {};\n\n  function getRouteParameter()\n  {\n    return getRouteParameter.cached ? getRouteParameter.cached : getRouteParameter.cached = \n      ( hasModule( 'ui.router' ) ? '$stateParams' : \n        ( hasModule( 'ngRoute' ) ? '$route' : \n          false ) );\n  }\n\n  function buildParamResolver()\n  {\n    if ( hasModule( 'ui.router') )\n    {\n      return function($stateParams)\n      {\n        return $stateParams;\n      };\n    }\n    else if ( hasModule( 'ngRoute') )\n    {\n      return function($route)\n      {\n        return $route.current;\n      };\n    }\n    return function()\n    {\n      return false;\n    };\n  }\n\n  function buildTemplateResolver(routeParams)\n  {\n    return function(text) \n    {\n      if ( Neuro.isString( text ) && routeParams ) \n      {\n        return Neuro.format( text, routeParams );\n      }\n\n      return text;\n    };\n  }\n\n  getRouteParameter.cached = null;\n\n  NeuroResolve.factory = function( name, callback )\n  {\n    var param = getRouteParameter();\n    var paramResolver = buildParamResolver();\n    var cache = false;\n    var cachedValue = void 0;\n\n    function factory($q, routing) \n    {\n      var defer = $q.defer();\n\n      if ( cachedValue !== void 0 )\n      {\n        defer.resolve( cachedValue );\n      }\n      else\n      {\n        var routeParams = paramResolver( routing );\n        var templateResolver = buildTemplateResolver( routeParams );\n\n        if ( cache )\n        {\n          defer.promise.then(function(resolvedValue)\n          {\n            cachedValue = resolvedValue;\n          });\n        }\n\n        Neuro.get( name, function(model) \n        {\n          callback( model, defer, templateResolver );\n        });\n      }\n\n      return defer.promise;\n    }\n\n    factory.$inject = ['$q'];\n\n    if ( param ) \n    {\n      factory.$inject.push( param );\n    }\n\n    factory.cache = function()\n    {\n      cache = true;\n\n      return factory;\n    };\n\n    factory.inject = function()\n    {\n      for (var i = 0; i < arguments.length; i++)\n      {\n        var arg = arguments[ i ];\n\n        if ( Neuro.isArray( arg ) )\n        {\n          factory.$inject.push.apply( factory.$inject, arg );\n        }\n        else\n        {\n          factory.$inject.push( arg );\n        }\n      }\n\n      return factory;\n    };\n\n    return factory;\n  };\n\n  NeuroResolve.model = function( name, input )\n  {\n    return NeuroResolve.factory( name, function(model, defer, templateResolver) \n    {\n      model.Database.grabModel( templateResolver( input ), function(instance) \n      {\n        if ( instance ) \n        {\n          defer.resolve( instance );\n        } \n        else \n        {\n          defer.reject();\n        }\n      });\n    });\n  };\n\n  NeuroResolve.fetch = function( name, input )\n  {\n    return NeuroResolve.factory( name, function(model, defer, templateResolver) \n    {\n      var db = model.Database;\n      var key = db.buildKeyFromInput( templateResolver( input ) );\n      var instance = db.get( key );\n\n      if ( !instance )\n      {\n        instance = db.buildObjectFromKey( key );\n\n        if ( Neuro.isObject( input ) )\n        {\n          instance.$set( input );\n        }\n      }\n\n      instance.$once( Neuro.Model.Events.RemoteGets, function()\n      {\n        defer.resolve( instance );\n      });\n\n      instance.$refresh();\n    });\n  };\n\n  NeuroResolve.fetchAll = function( name )\n  {\n    return NeuroResolve.factory( name, function(model, defer, templateResolver) \n    {\n      model.fetchAll(function(models)\n      {\n        defer.resolve( models );\n      });\n    });\n  };\n\n  NeuroResolve.create = function( name, properties, dontSave )\n  {\n    return NeuroResolve.factory( name, function(model, defer, templateResolver) \n    {\n      if ( dontSave )\n      {\n        defer.resolve( new model( properties ) );\n      }\n      else\n      {\n        var instance = model.create( properties );\n\n        if ( instance.$isSaved() )\n        {\n          defer.resolve( instance );\n        }\n        else\n        {\n          instance.$once( Neuro.Model.Events.RemoteSaves, function()\n          {\n            defer.resolve( instance );\n          });\n        }\n      }\n    });\n  };\n\n  NeuroResolve.query = function( name, query )\n  {\n    return NeuroResolve.factory( name, function(model, defer, templateResolver)\n    {\n      var remoteQuery = model.query( templateResolver( query ) );\n\n      remoteQuery.success(function() \n      {\n        defer.resolve( remoteQuery );\n      });\n\n      remoteQuery.failure(function() \n      {\n        defer.reject();\n      });\n    });\n  };\n\n  NeuroResolve.all = function( name )\n  {\n    return NeuroResolve.factory( name, function(model, defer, templateResolver)\n    {\n      model.Database.ready(function() \n      {\n        defer.resolve( model.all() );\n      });\n    });\n  };\n\n  NeuroResolve.where = function( name, whereProperties, whereValue, whereEquals )\n  {\n    return NeuroResolve.factory( name, function(model, defer, templateResolver)\n    {\n      if ( Neuro.isObject( whereProperties ) )\n      {\n        for (var prop in whereProperties)\n        {\n          whereProperties[ prop ] = templateResolver( whereProperties[ prop ] );\n        }\n      }\n      if ( Neuro.isString( whereValue ) )\n      {\n        whereValue = templateResolver( whereValue );\n      }\n\n      model.Database.ready(function() \n      {\n        defer.resolve( model.all().filtered( whereProperties, whereValue, whereEquals ) );\n      });\n    });\n  };\n\n})( angular.module('neurosync', []), this );"],"sourceRoot":"/source/"}