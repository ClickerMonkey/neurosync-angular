{"version":3,"sources":["neurosync-angular.js"],"names":["app","undefined","NeuroFactory","$http","Neuro","rest","database","execute","method","data","url","success","failure","offlineValue","onRestSuccess","response","onRestError","status","debug","Debugs","REST","this","forceOffline","options","then","all","api","get","model","$key","create","encoded","update","remove","query","Neuro_debug","NeuroSettings","apply","arguments","ScopeEval","listenToNetworkStatus","NeuroBindFactory","$log","NeuroBind","scope","target","callback","notify","newNotification","release","newRelease","on","Events","Database","Model","Collection","Scope","prototype","isNeuro","$on","off","$off","binder","$evalAsync","constant","factory","angular","module"],"mappings":"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","file":"neurosync-angular.min.js","sourcesContent":["(function (app, undefined)\n{\n\n  var NeuroSettings = {\n    debug: false\n  };\n\n  app\n    .constant( 'NeuroSettings', NeuroSettings )\n    .factory( 'Neuro', ['$http', NeuroFactory] )\n    .factory( 'NeuroBind', ['$log', NeuroBindFactory] )\n  ;\n\n  function NeuroFactory($http)\n  {\n\n    Neuro.rest = function(database)\n    {\n\n      function execute( method, data, url, success, failure, offlineValue )\n      {\n        Neuro.debug( Neuro.Debugs.REST, this, method, url, data );\n\n        if ( Neuro.forceOffline )\n        {\n          failure( offlineValue, 0 );\n        }\n        else\n        {\n          function onRestSuccess(response) \n          {\n            success( response.data );\n          }\n\n          function onRestError(response) \n          {\n            failure( response.data, response.status );\n          }\n\n          var options = \n          {\n            method: method,\n            data: data,\n            url: url\n          };\n\n          $http( options ).then( onRestSuccess, onRestError );\n        }\n      }\n      \n      return {\n        all: function( success, failure )\n        {\n          execute( 'GET', undefined, database.api, success, failure, [] );\n        },\n        get: function( model, success, failure )\n        {\n          execute( 'GET', undefined, database.api + model.$key(), success, failure );\n        },\n        create: function( model, encoded, success, failure )\n        {\n          execute( 'POST', encoded, database.api, success, failure, {} );\n        },\n        update: function( model, encoded, success, failure )\n        {\n          execute( 'PUT', encoded, database.api + model.$key(), success, failure, {} );\n        },\n        remove: function( model, success, failure )\n        {\n          execute( 'DELETE', undefined, database.api + model.$key(), success, failure, {} );\n        },\n        query: function( query, success, failure )\n        {\n          var method = query.method || 'GET';\n          var data = query.data || undefined;\n          var url = query.url || query;\n\n          execute( method, data, url, success, failure );\n        }\n      };\n\n    };\n\n    var Neuro_debug = Neuro.debug;\n\n    Neuro.debug = function()\n    {\n      if ( NeuroSettings.debug )\n      {\n        Neuro_debug.apply( this, arguments );\n      }\n    };\n\n    Neuro.Debugs.ScopeEval = 100000;\n\n    Neuro.listenToNetworkStatus();\n\n    return Neuro;\n  }\n\n  function NeuroBindFactory($log)\n  {\n    function NeuroBind( scope, target, callback )\n    {\n      if ( !(this instanceof NeuroBind) ) return new NeuroBind( scope, target, callback );\n\n      this.scope = scope;\n      this.target = target;\n      this.callback = callback;\n\n      this.notify = this.newNotification();\n      this.release = this.newRelease();\n      \n      this.on();\n    }\n\n    NeuroBind.Events = {\n      Database: 'updated',\n      Model: 'saved removed remote-update relation-update',\n      Collection: 'add adds sort remove reset',\n      Scope: '$destroy'\n    };\n\n    NeuroBind.prototype = \n    {\n      on: function()\n      {\n        if ( Neuro.isNeuro( this.target ) )\n        {\n          this.target = this.target.Database;\n        }\n\n        if ( this.target instanceof Neuro.Database )\n        {\n          this.target.on( NeuroBind.Events.Database, this.notify  );\n        }\n        else if ( this.target instanceof Neuro.Model )\n        {\n          this.target.$on( NeuroBind.Events.Model, this.notify );\n        }\n        else if ( this.target instanceof Neuro.Collection )\n        {\n          this.target.on( NeuroBind.Events.Collection, this.notify );\n        }\n\n        this.scope.$on( NeuroBind.Events.Scope, this.release );\n      },\n      off: function()\n      {\n        if ( this.target instanceof Neuro.Database )\n        {\n          this.target.off( NeuroBind.Events.Database, this.notify );\n        }\n        else if ( this.target instanceof Neuro.Model )\n        {\n          this.target.$off( NeuroBind.Events.Model, this.notify );\n        }\n        else if ( this.target instanceof Neuro.Collection )\n        {\n          this.target.off( NeuroBind.Events.Collection, this.notify );\n        }\n      },\n      newRelease: function()\n      {\n        var binder = this;\n\n        return function()\n        {\n          binder.off();\n        };\n      },\n      newNotification: function()\n      {\n        var binder = this;\n\n        return function()\n        {\n          binder.scope.$evalAsync(function()\n          {\n            if ( binder.callback )\n            {\n              binder.callback.apply( binder.target );\n            }\n\n            if ( NeuroSettings.debug )\n            {\n              Neuro.debug( '[Scope:$evalAsync]', binder.scope );\n            }\n          });\n        };\n      }\n    };\n\n    return NeuroBind;\n  }\n\n})( angular.module('neurosync', []) );"],"sourceRoot":"/source/"}