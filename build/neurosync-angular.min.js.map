{"version":3,"sources":["neurosync-angular.js"],"names":["app","global","undefined","NeuroFactory","$http","Neuro","rest","database","execute","method","data","url","success","failure","offlineValue","onRestSuccess","response","onRestError","status","debug","Debugs","REST","this","forceOffline","options","then","all","api","get","model","$key","create","encoded","update","remove","query","Neuro_debug","NeuroSettings","apply","arguments","ScopeEval","listenToNetworkStatus","NeuroBindFactory","NeuroBind","scope","target","callback","notify","newNotification","release","newRelease","on","buildTemplate","template","params","replace","TEMPLATE_REGEX","match","prop","hasModule","moduleName","tested","angular","module","e","getRouteParameter","cached","buildParamResolver","$stateParams","$route","current","buildTemplateResolver","routeParams","text","isString","NeuroResolve","constant","factory","Events","Database","Model","Collection","Page","Scope","prototype","isNeuro","$on","off","$off","binder","$evalAsync","name","param","paramResolver","$q","routing","defer","templateResolver","promise","splice","input","grabModel","instance","resolve","reject","fetch","properties","dontSave","remoteQuery","ready","where","whereProperties","whereValue","whereEquals","isObject","filtered","window"],"mappings":"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","file":"neurosync-angular.min.js","sourcesContent":["(function (app, global, undefined)\n{\n\n  var NeuroSettings = {\n    debug: false\n  };\n\n  var NeuroResolve = {\n\n  };\n\n  app\n    .constant( 'NeuroResolve', NeuroResolve )\n    .constant( 'NeuroSettings', NeuroSettings )\n    .factory( 'Neuro', ['$http', NeuroFactory] )\n    .factory( 'NeuroBind', NeuroBindFactory )\n  ;\n\n  global.NeuroBind = NeuroBind;\n  global.NeuroResolve = NeuroResolve;\n\n  function NeuroFactory($http)\n  {\n\n    Neuro.rest = function(database)\n    {\n\n      function execute( method, data, url, success, failure, offlineValue )\n      {\n        Neuro.debug( Neuro.Debugs.REST, this, method, url, data );\n\n        if ( Neuro.forceOffline )\n        {\n          failure( offlineValue, 0 );\n        }\n        else\n        {\n          function onRestSuccess(response) \n          {\n            success( response.data );\n          }\n\n          function onRestError(response) \n          {\n            failure( response.data, response.status );\n          }\n\n          var options = \n          {\n            method: method,\n            data: data,\n            url: url\n          };\n\n          $http( options ).then( onRestSuccess, onRestError );\n        }\n      }\n      \n      return {\n        all: function( success, failure )\n        {\n          execute( 'GET', undefined, database.api, success, failure, [] );\n        },\n        get: function( model, success, failure )\n        {\n          execute( 'GET', undefined, database.api + model.$key(), success, failure );\n        },\n        create: function( model, encoded, success, failure )\n        {\n          execute( 'POST', encoded, database.api, success, failure, {} );\n        },\n        update: function( model, encoded, success, failure )\n        {\n          execute( 'PUT', encoded, database.api + model.$key(), success, failure, {} );\n        },\n        remove: function( model, success, failure )\n        {\n          execute( 'DELETE', undefined, database.api + model.$key(), success, failure, {} );\n        },\n        query: function( query, success, failure )\n        {\n          var method = query.method || 'GET';\n          var data = query.data || undefined;\n          var url = query.url || query;\n\n          execute( method, data, url, success, failure );\n        }\n      };\n\n    };\n\n    var Neuro_debug = Neuro.debug;\n\n    Neuro.debug = function()\n    {\n      if ( NeuroSettings.debug )\n      {\n        Neuro_debug.apply( this, arguments );\n      }\n    };\n\n    Neuro.Debugs.ScopeEval = 100000;\n\n    Neuro.listenToNetworkStatus();\n\n    return Neuro;\n  }\n\n  function NeuroBindFactory()\n  {\n    return NeuroBind;\n  }\n\n  function NeuroBind( scope, target, callback )\n  {\n    if ( !(this instanceof NeuroBind) ) return new NeuroBind( scope, target, callback );\n\n    this.scope = scope;\n    this.target = target;\n    this.callback = callback;\n\n    this.notify = this.newNotification();\n    this.release = this.newRelease();\n    \n    this.on();\n  }\n\n  NeuroBind.Events = \n  {\n    Database: 'updated',\n    Model: 'saved removed remote-update relation-update',\n    Collection: 'add adds sort remove reset',\n    Page: 'change',\n    Scope: '$destroy'\n  };\n\n  NeuroBind.prototype = \n  {\n    on: function()\n    {\n      if ( Neuro.isNeuro( this.target ) )\n      {\n        this.target = this.target.Database;\n      }\n\n      if ( this.target instanceof Neuro.Database )\n      {\n        this.target.on( NeuroBind.Events.Database, this.notify  );\n      }\n      else if ( this.target instanceof Neuro.Model )\n      {\n        this.target.$on( NeuroBind.Events.Model, this.notify );\n      }\n      else if ( this.target instanceof Neuro.Collection )\n      {\n        this.target.on( NeuroBind.Events.Collection, this.notify );\n      }\n      else if ( this.target instanceof Neuro.Page )\n      {\n        this.target.on( NeuroBind.Events.Page, this.notify );\n      }\n\n      this.scope.$on( NeuroBind.Events.Scope, this.release );\n    },\n    off: function()\n    {\n      if ( this.target instanceof Neuro.Database )\n      {\n        this.target.off( NeuroBind.Events.Database, this.notify );\n      }\n      else if ( this.target instanceof Neuro.Model )\n      {\n        this.target.$off( NeuroBind.Events.Model, this.notify );\n      }\n      else if ( this.target instanceof Neuro.Collection )\n      {\n        this.target.off( NeuroBind.Events.Collection, this.notify );\n      }\n      else if ( this.target instanceof Neuro.Page )\n      {\n        this.target.off( NeuroBind.Events.Page, this.notify );\n      }\n    },\n    newRelease: function()\n    {\n      var binder = this;\n\n      return function()\n      {\n        binder.off();\n      };\n    },\n    newNotification: function()\n    {\n      var binder = this;\n\n      return function()\n      {\n        binder.scope.$evalAsync(function()\n        {\n          if ( binder.callback )\n          {\n            binder.callback.apply( binder.target );\n          }\n\n          if ( NeuroSettings.debug )\n          {\n            Neuro.debug( '[Scope:$evalAsync]', binder.scope );\n          }\n        });\n      };\n    }\n  };\n\n  var TEMPLATE_REGEX = /\\{([^\\}]+)\\}/;\n\n  function buildTemplate(template, params)\n  {\n    return template.replace( TEMPLATE_REGEX, function(match, prop)\n    {\n      return prop in params ? params[ prop ] : '';\n    });\n  }\n\n  function hasModule(moduleName)\n  {\n    if ( moduleName in hasModule.tested )\n    {\n      return hasModule.tested[ moduleName ];\n    }\n\n    try\n    {\n      angular.module( moduleName );\n\n      return hasModule.tested[ moduleName ] = true;\n    }\n    catch (e)\n    {\n      return hasModule.tested[ moduleName ] = false;\n    }\n  }\n\n  hasModule.tested = {};\n\n  function getRouteParameter()\n  {\n    return getRouteParameter.cached ? getRouteParameter.cached : getRouteParameter.cached = \n      ( hasModule( 'ui.router' ) ? '$stateParams' : \n        ( hasModule( 'ngRoute' ) ? '$route' : \n          false ) );\n  }\n\n  function buildParamResolver()\n  {\n    if ( hasModule( 'ui.router') )\n    {\n      return function($stateParams)\n      {\n        return $stateParams;\n      };\n    }\n    else if ( hasModule( 'ngRoute') )\n    {\n      return function($route)\n      {\n        return $route.current;\n      };\n    }\n    return function()\n    {\n      return false;\n    };\n  }\n\n  function buildTemplateResolver(routeParams)\n  {\n    return function(text) \n    {\n      if (angular.isString( text ) && routeParams ) \n      {\n        return buildTemplate( text, routeParams );\n      }\n\n      return text;\n    };\n  }\n\n  getRouteParameter.cached = null;\n\n  NeuroResolve.factory = function( name, callback )\n  {\n    var param = getRouteParameter();\n    var paramResolver = buildParamResolver();\n\n    var factory = ['$q', function resolve($q, routing) \n    {\n      var defer = $q.defer();\n      var routeParams = paramResolver( routing );\n      var templateResolver = buildTemplateResolver( routeParams );\n\n      Neuro.get( name, function(model) \n      {\n        callback( model, defer, templateResolver );\n      });\n\n      return defer.promise;\n    }];\n\n    if ( param ) \n    {\n      factory.splice( 1, 0, param );\n    }\n\n    return factory;\n  };\n\n  NeuroResolve.model = function( name, input )\n  {\n    return NeuroResolve.factory( name, function(model, defer, templateResolver) \n    {\n      model.Database.grabModel( templateResolver( input ), function(instance) \n      {\n        if ( instance ) {\n          defer.resolve( instance );\n        } else {\n          defer.reject();\n        }\n      });\n    });\n  };\n\n  NeuroResolve.fetch = function( name, input )\n  {\n    return NeuroResolve.factory( name, function(model, defer, templateResolver) \n    {\n      defer.resolve( model.fetch( templateResolver( input ) ) );\n    });\n  };\n\n  NeuroResolve.create = function( name, properties, dontSave )\n  {\n    return NeuroResolve.factory( name, function(model, defer, templateResolver) \n    {\n      if ( dontSave )\n      {\n        defer.resolve( new model( properties ) );\n      }\n      else\n      {\n        defer.resolve( model.create( properties ) );\n      }\n    });\n  };\n\n  NeuroResolve.query = function( name, query )\n  {\n    return NeuroResolve.factory( name, function(model, defer, templateResolver)\n    {\n      var remoteQuery = model.query( templateResolver( query ) );\n\n      remoteQuery.success(function() \n      {\n        defer.resolve( remoteQuery );\n      });\n\n      remoteQuery.failure(function() \n      {\n        defer.reject();\n      });\n    });\n  };\n\n  NeuroResolve.all = function( name )\n  {\n    return NeuroResolve.factory( name, function(model, defer, templateResolver)\n    {\n      model.Database.ready(function() \n      {\n        defer.resolve( model.all() );\n      });\n    });\n  };\n\n  NeuroResolve.where = function( name, whereProperties, whereValue, whereEquals )\n  {\n    return NeuroResolve.factory( name, function(model, defer, templateResolver)\n    {\n      if ( angular.isObject( whereProperties ) )\n      {\n        for (var prop in whereProperties)\n        {\n          whereProperties[ prop ] = templateResolver( whereProperties[ prop ] );\n        }\n      }\n      if ( angular.isString( whereValue ) )\n      {\n        whereValue = templateResolver( whereValue );\n      }\n\n      model.Database.ready(function() \n      {\n        defer.resolve( model.all().filtered( whereProperties, whereValue, whereEquals ) );\n      });\n    });\n  };\n\n})( angular.module('neurosync', []), window );"],"sourceRoot":"/source/"}