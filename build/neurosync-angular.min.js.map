{"version":3,"sources":["neurosync-angular.js"],"names":["app","global","undefined","NeuroFactory","$http","Neuro","rest","database","execute","method","data","url","success","failure","offlineValue","onRestSuccess","response","onRestError","status","debug","Debugs","REST","this","forceOffline","options","then","all","api","get","model","$key","create","encoded","update","remove","query","Neuro_debug","NeuroSettings","apply","arguments","ScopeEval","listenToNetworkStatus","NeuroBindFactory","NeuroBind","NeuroSelectFactory","NeuroSelect","scope","target","callback","notify","newNotification","release","newRelease","on","source","select","$onRemove","copyFunction","$handleRemove","$onRemoves","$handleRemoves","$onCleared","$handleCleared","$onReset","$handleReset","$reset","$select","buildTemplate","template","params","replace","TEMPLATE_REGEX","match","prop","hasModule","moduleName","tested","angular","module","e","getRouteParameter","cached","buildParamResolver","$stateParams","$route","current","buildTemplateResolver","routeParams","text","isString","NeuroResolve","constant","factory","Events","Database","Model","Collection","Page","Scope","prototype","isNeuro","$on","off","$off","binder","$evalAsync","$source","$disconnect","$connect","Remove","Removes","Cleared","Reset","isArray","db","key","i","length","buildKeyFromInput","$selection","out","selection","push","removed","has","ModelCollection","selectable","name","param","paramResolver","$q","routing","defer","templateResolver","promise","splice","input","grabModel","instance","resolve","reject","fetch","fetchAll","models","properties","dontSave","remoteQuery","ready","where","whereProperties","whereValue","whereEquals","isObject","filtered","window"],"mappings":"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","file":"neurosync-angular.min.js","sourcesContent":["(function (app, global, undefined)\n{\n\n  var NeuroSettings = {\n    debug: false\n  };\n\n  var NeuroResolve = {\n\n  };\n\n  app\n    .constant( 'NeuroResolve', NeuroResolve )\n    .constant( 'NeuroSettings', NeuroSettings )\n    .factory( 'Neuro', ['$http', NeuroFactory] )\n    .factory( 'NeuroBind', NeuroBindFactory )\n    .factory( 'NeuroSelect', NeuroSelectFactory )\n  ;\n\n  global.NeuroBind = NeuroBind;\n  global.NeuroResolve = NeuroResolve;\n  global.NeuroSelect = NeuroSelect;\n\n  function NeuroFactory($http)\n  {\n\n    Neuro.rest = function(database)\n    {\n\n      function execute( method, data, url, success, failure, offlineValue )\n      {\n        Neuro.debug( Neuro.Debugs.REST, this, method, url, data );\n\n        if ( Neuro.forceOffline )\n        {\n          failure( offlineValue, 0 );\n        }\n        else\n        {\n          function onRestSuccess(response) \n          {\n            success( response.data );\n          }\n\n          function onRestError(response) \n          {\n            failure( response.data, response.status );\n          }\n\n          var options = \n          {\n            method: method,\n            data: data,\n            url: url\n          };\n\n          $http( options ).then( onRestSuccess, onRestError );\n        }\n      }\n      \n      return {\n        all: function( success, failure )\n        {\n          execute( 'GET', undefined, database.api, success, failure, [] );\n        },\n        get: function( model, success, failure )\n        {\n          execute( 'GET', undefined, database.api + model.$key(), success, failure );\n        },\n        create: function( model, encoded, success, failure )\n        {\n          execute( 'POST', encoded, database.api, success, failure, {} );\n        },\n        update: function( model, encoded, success, failure )\n        {\n          execute( 'PUT', encoded, database.api + model.$key(), success, failure, {} );\n        },\n        remove: function( model, success, failure )\n        {\n          execute( 'DELETE', undefined, database.api + model.$key(), success, failure, {} );\n        },\n        query: function( query, success, failure )\n        {\n          var method = query.method || 'GET';\n          var data = query.data || undefined;\n          var url = query.url || query;\n\n          execute( method, data, url, success, failure );\n        }\n      };\n\n    };\n\n    var Neuro_debug = Neuro.debug;\n\n    Neuro.debug = function()\n    {\n      if ( NeuroSettings.debug )\n      {\n        Neuro_debug.apply( this, arguments );\n      }\n    };\n\n    Neuro.Debugs.ScopeEval = 100000;\n\n    Neuro.listenToNetworkStatus();\n\n    return Neuro;\n  }\n\n  function NeuroBindFactory()\n  {\n    return NeuroBind;\n  }\n\n  function NeuroSelectFactory()\n  {\n    return NeuroSelect;\n  }\n\n  function NeuroBind( scope, target, callback )\n  {\n    if ( !(this instanceof NeuroBind) ) return new NeuroBind( scope, target, callback );\n\n    this.scope = scope;\n    this.target = target;\n    this.callback = callback;\n\n    this.notify = this.newNotification();\n    this.release = this.newRelease();\n    \n    this.on();\n  }\n\n  NeuroBind.Events = \n  {\n    Database:     'updated',\n    Model:        'saved removed remote-update relation-update',\n    Collection:   'add adds sort remove reset',\n    Page:         'change',\n    Scope:        '$destroy'\n  };\n\n  NeuroBind.prototype = \n  {\n    on: function()\n    {\n      if ( Neuro.isNeuro( this.target ) )\n      {\n        this.target = this.target.Database;\n      }\n\n      if ( this.target instanceof Neuro.Database )\n      {\n        this.target.on( NeuroBind.Events.Database, this.notify  );\n      }\n      else if ( this.target instanceof Neuro.Model )\n      {\n        this.target.$on( NeuroBind.Events.Model, this.notify );\n      }\n      else if ( this.target instanceof Neuro.Collection )\n      {\n        this.target.on( NeuroBind.Events.Collection, this.notify );\n      }\n      else if ( this.target instanceof Neuro.Page )\n      {\n        this.target.on( NeuroBind.Events.Page, this.notify );\n      }\n\n      this.scope.$on( NeuroBind.Events.Scope, this.release );\n    },\n    off: function()\n    {\n      if ( this.target instanceof Neuro.Database )\n      {\n        this.target.off( NeuroBind.Events.Database, this.notify );\n      }\n      else if ( this.target instanceof Neuro.Model )\n      {\n        this.target.$off( NeuroBind.Events.Model, this.notify );\n      }\n      else if ( this.target instanceof Neuro.Collection )\n      {\n        this.target.off( NeuroBind.Events.Collection, this.notify );\n      }\n      else if ( this.target instanceof Neuro.Page )\n      {\n        this.target.off( NeuroBind.Events.Page, this.notify );\n      }\n    },\n    newRelease: function()\n    {\n      var binder = this;\n\n      return function()\n      {\n        binder.off();\n      };\n    },\n    newNotification: function()\n    {\n      var binder = this;\n\n      return function()\n      {\n        binder.scope.$evalAsync(function()\n        {\n          if ( binder.callback )\n          {\n            binder.callback.apply( binder.target );\n          }\n\n          if ( NeuroSettings.debug )\n          {\n            Neuro.debug( '[Scope:$evalAsync]', binder.scope );\n          }\n        });\n      };\n    }\n  };\n\n  function NeuroSelect(source, select)\n  {\n    this.$onRemove = Neuro.copyFunction( this.$handleRemove );\n    this.$onRemoves = Neuro.copyFunction( this.$handleRemoves );\n    this.$onCleared = Neuro.copyFunction( this.$handleCleared );\n    this.$onReset = Neuro.copyFunction( this.$handleReset );\n\n    this.$reset( source );\n    this.$select( select );\n  }\n\n  NeuroSelect.prototype = \n  {\n\n    $reset: function(source)\n    {\n      if ( this.$source !== source )\n      {\n        if ( this.$source )\n        {\n          this.$disconnect();\n        }\n\n        this.$source = source;\n        this.$connect();\n      }\n    },\n\n    $connect: function()\n    {\n      this.$source.on( Neuro.Collection.Events.Remove, this.$onRemove, this );\n      this.$source.on( Neuro.Collection.Events.Removes, this.$onRemoves, this );\n      this.$source.on( Neuro.Collection.Events.Cleared, this.$onCleared, this );\n      this.$source.on( Neuro.Collection.Events.Reset, this.$onReset, this );\n    },\n\n    $disconnect: function()\n    {\n      this.$source.off( Neuro.Collection.Events.Remove, this.$onRemove );\n      this.$source.off( Neuro.Collection.Events.Removes, this.$onRemoves );\n      this.$source.off( Neuro.Collection.Events.Cleared, this.$onCleared );\n      this.$source.off( Neuro.Collection.Events.Reset, this.$onReset );\n    },\n\n    $select: function(select)\n    {\n      if ( angular.isArray( select ) )\n      {\n        var db = this.$source.database;\n        var remove = {};\n\n        for (var key in this)\n        {\n          if ( typeof this[ key ] === 'boolean' )\n          {\n            remove[ key ] = this[ key ];\n          }\n        }\n\n        for (var i = 0; i < select.length; i++)\n        {\n          var key = db.buildKeyFromInput( select[ i ] );\n\n          this[ key ] = true;\n\n          delete remove[ key ];\n        }\n\n        for (var key in remove)\n        {\n          delete this[ key ];\n        }\n      }\n    },\n\n    $selection: function(out)\n    {\n      var source = this.$source;\n      var selection = out || [];\n\n      for (var key in this)\n      {\n        if ( this[ key ] === true )\n        {\n          var model = source.get( key );\n\n          if ( model )\n          {\n            selection.push( model );\n          }\n        }\n      }\n\n      return selection;\n    },\n\n    $handleRemove: function(removed)\n    {\n      var db = this.$source.database;\n      var key = db.buildKeyFromInput( removed );\n\n      delete this[ key ];\n    },\n\n    $handleRemoves: function(removed)\n    {\n      for (var i = 0; i < removed.length; i++)\n      {\n        this.$handleRemove( removed[i] );\n      }\n    },\n\n    $handleCleared: function()\n    {\n      for (var key in this)\n      {\n        if ( typeof this[ key ] === 'boolean' )\n        {\n          delete this[ key ];\n        }\n      }\n    },\n\n    $handleReset: function()\n    {\n      var source = this.$source;\n\n      for (var key in this)\n      {\n        if ( typeof this[ key ] === 'boolean' )\n        {\n          if ( !source.has( key ) )\n          {\n            delete this[ key ];\n          }\n        }\n      }\n    }\n  };\n\n  Neuro.ModelCollection.prototype.selectable = function(select)\n  {\n    return new NeuroSelect( this, select );\n  };\n\n  var TEMPLATE_REGEX = /\\{([^\\}]+)\\}/;\n\n  function buildTemplate(template, params)\n  {\n    return template.replace( TEMPLATE_REGEX, function(match, prop)\n    {\n      return prop in params ? params[ prop ] : '';\n    });\n  }\n\n  function hasModule(moduleName)\n  {\n    if ( moduleName in hasModule.tested )\n    {\n      return hasModule.tested[ moduleName ];\n    }\n\n    try\n    {\n      angular.module( moduleName );\n\n      return hasModule.tested[ moduleName ] = true;\n    }\n    catch (e)\n    {\n      return hasModule.tested[ moduleName ] = false;\n    }\n  }\n\n  hasModule.tested = {};\n\n  function getRouteParameter()\n  {\n    return getRouteParameter.cached ? getRouteParameter.cached : getRouteParameter.cached = \n      ( hasModule( 'ui.router' ) ? '$stateParams' : \n        ( hasModule( 'ngRoute' ) ? '$route' : \n          false ) );\n  }\n\n  function buildParamResolver()\n  {\n    if ( hasModule( 'ui.router') )\n    {\n      return function($stateParams)\n      {\n        return $stateParams;\n      };\n    }\n    else if ( hasModule( 'ngRoute') )\n    {\n      return function($route)\n      {\n        return $route.current;\n      };\n    }\n    return function()\n    {\n      return false;\n    };\n  }\n\n  function buildTemplateResolver(routeParams)\n  {\n    return function(text) \n    {\n      if (angular.isString( text ) && routeParams ) \n      {\n        return buildTemplate( text, routeParams );\n      }\n\n      return text;\n    };\n  }\n\n  getRouteParameter.cached = null;\n\n  NeuroResolve.factory = function( name, callback )\n  {\n    var param = getRouteParameter();\n    var paramResolver = buildParamResolver();\n\n    var factory = ['$q', function resolve($q, routing) \n    {\n      var defer = $q.defer();\n      var routeParams = paramResolver( routing );\n      var templateResolver = buildTemplateResolver( routeParams );\n\n      Neuro.get( name, function(model) \n      {\n        callback( model, defer, templateResolver );\n      });\n\n      return defer.promise;\n    }];\n\n    if ( param ) \n    {\n      factory.splice( 1, 0, param );\n    }\n\n    return factory;\n  };\n\n  NeuroResolve.model = function( name, input )\n  {\n    return NeuroResolve.factory( name, function(model, defer, templateResolver) \n    {\n      model.Database.grabModel( templateResolver( input ), function(instance) \n      {\n        if ( instance ) {\n          defer.resolve( instance );\n        } else {\n          defer.reject();\n        }\n      });\n    });\n  };\n\n  NeuroResolve.fetch = function( name, input )\n  {\n    return NeuroResolve.factory( name, function(model, defer, templateResolver) \n    {\n      defer.resolve( model.fetch( templateResolver( input ) ) );\n    });\n  };\n\n  NeuroResolve.fetchAll = function( name )\n  {\n    return NeuroResolve.factory( name, function(model, defer, templateResolver) \n    {\n      model.fetchAll(function(models)\n      {\n        defer.resolve( models );\n      });\n    });\n  };\n\n  NeuroResolve.create = function( name, properties, dontSave )\n  {\n    return NeuroResolve.factory( name, function(model, defer, templateResolver) \n    {\n      if ( dontSave )\n      {\n        defer.resolve( new model( properties ) );\n      }\n      else\n      {\n        defer.resolve( model.create( properties ) );\n      }\n    });\n  };\n\n  NeuroResolve.query = function( name, query )\n  {\n    return NeuroResolve.factory( name, function(model, defer, templateResolver)\n    {\n      var remoteQuery = model.query( templateResolver( query ) );\n\n      remoteQuery.success(function() \n      {\n        defer.resolve( remoteQuery );\n      });\n\n      remoteQuery.failure(function() \n      {\n        defer.reject();\n      });\n    });\n  };\n\n  NeuroResolve.all = function( name )\n  {\n    return NeuroResolve.factory( name, function(model, defer, templateResolver)\n    {\n      model.Database.ready(function() \n      {\n        defer.resolve( model.all() );\n      });\n    });\n  };\n\n  NeuroResolve.where = function( name, whereProperties, whereValue, whereEquals )\n  {\n    return NeuroResolve.factory( name, function(model, defer, templateResolver)\n    {\n      if ( angular.isObject( whereProperties ) )\n      {\n        for (var prop in whereProperties)\n        {\n          whereProperties[ prop ] = templateResolver( whereProperties[ prop ] );\n        }\n      }\n      if ( angular.isString( whereValue ) )\n      {\n        whereValue = templateResolver( whereValue );\n      }\n\n      model.Database.ready(function() \n      {\n        defer.resolve( model.all().filtered( whereProperties, whereValue, whereEquals ) );\n      });\n    });\n  };\n\n})( angular.module('neurosync', []), window );"],"sourceRoot":"/source/"}