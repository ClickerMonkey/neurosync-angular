{"version":3,"sources":["neurosync-angular.js"],"names":["app","global","undefined","InitializeNeuro","$http","Neuro_debug","Neuro","debug","restSet","rest","database","removeTrailingSlash","x","charAt","length","substring","execute","method","data","url","success","failure","offlineValue","onRestSuccess","response","onRestError","status","Debugs","REST","this","forceOffline","options","then","all","api","get","model","$key","create","encoded","update","remove","query","NeuroSettings","apply","arguments","ScopeEval","listenToNetworkStatus","NeuroBind","scope","target","callback","notify","newNotification","release","newRelease","on","NeuroSelect","source","select","fill","$onRemove","bind","$handleRemove","$onRemoves","$handleRemoves","$onCleared","$handleCleared","$onReset","$handleReset","$reset","$select","hasModule","moduleName","tested","angular","module","e","getRouteParameter","cached","buildParamResolver","$stateParams","$route","current","buildTemplateResolver","routeParams","text","isString","format","ResolveInput","obj","resolver","isObject","resolved","prop","NeuroResolve","constant","run","Events","Database","Model","Collection","Page","Scope","prototype","isNeuro","$on","off","$off","binder","$evalAsync","$source","$disconnect","$connect","Remove","Removes","Cleared","Reset","isArray","db","key","isBoolean","i","buildKeyFromInput","keys","$selection","out","selection","push","removed","has","ModelCollection","selectable","factory","name","$q","routing","defer","cachedValue","resolve","paramResolver","templateResolver","cache","promise","resolvedValue","param","$inject","inject","arg","input","resolvedInput","grabModel","instance","reject","fetch","fetchAll","models","grab","grabAll","properties","dontSave","resolvedProperties","$isSaved","$once","RemoteSaves","resolvedQuery","remoteQuery","ready","where","whereProperties","whereValue","whereEquals","resolvedWhereProperties","resolvedWhereValue","filtered"],"mappings":"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","file":"neurosync-angular.min.js","sourcesContent":["(function (app, global, undefined)\n{\n\n  var NeuroSettings = {\n    debug: false\n  };\n\n  var NeuroResolve = {\n\n  };\n\n  app\n    .constant( 'NeuroSettings', NeuroSettings )\n    .constant( 'Neuro', Neuro )\n    .constant( 'NeuroBind', NeuroBind )\n    .constant( 'NeuroResolve', NeuroResolve )\n    .constant( 'NeuroSelect', NeuroSelect )\n    .run( ['$http', InitializeNeuro] )\n  ;\n\n  global.NeuroBind = NeuroBind;\n  global.NeuroResolve = NeuroResolve;\n  global.NeuroSelect = NeuroSelect;\n\n  function InitializeNeuro($http)\n  {\n    var Neuro_debug = Neuro.debug;\n\n    if ( !Neuro.restSet )\n    {\n      Neuro.rest = function(database)\n      {\n        function removeTrailingSlash(x)\n        {\n          return x.charAt(x.length - 1) === '/' ? x.substring(0, x.length - 1) : x;\n        }\n\n        function execute( method, data, url, success, failure, offlineValue )\n        {\n          Neuro.debug( Neuro.Debugs.REST, this, method, url, data );\n\n          if ( Neuro.forceOffline )\n          {\n            failure( offlineValue, 0 );\n          }\n          else\n          {\n            function onRestSuccess(response)\n            {\n              success( response.data );\n            }\n\n            function onRestError(response)\n            {\n              failure( response.data, response.status );\n            }\n\n            var options =\n            {\n              method: method,\n              data: data,\n              url: url\n            };\n\n            $http( options ).then( onRestSuccess, onRestError );\n          }\n        }\n\n        return {\n          all: function( success, failure )\n          {\n            execute( 'GET', undefined, database.api, success, failure, [] );\n          },\n          get: function( model, success, failure )\n          {\n            execute( 'GET', undefined, removeTrailingSlash( database.api + model.$key() ), success, failure );\n          },\n          create: function( model, encoded, success, failure )\n          {\n            execute( 'POST', encoded, removeTrailingSlash( database.api ), success, failure, {} );\n          },\n          update: function( model, encoded, success, failure )\n          {\n            execute( 'PUT', encoded, removeTrailingSlash( database.api + model.$key() ), success, failure, {} );\n          },\n          remove: function( model, success, failure )\n          {\n            execute( 'DELETE', undefined, removeTrailingSlash( database.api + model.$key() ), success, failure, {} );\n          },\n          query: function( query, success, failure )\n          {\n            var method = query.method || 'GET';\n            var data = query.data || undefined;\n            var url = query.url || query;\n\n            execute( method, data, url, success, failure );\n          }\n        };\n\n      };\n\n      Neuro.restSet = true;\n    }\n\n    Neuro.debug = function()\n    {\n      if ( NeuroSettings.debug )\n      {\n        Neuro_debug.apply( this, arguments );\n      }\n    };\n\n    Neuro.Debugs.ScopeEval = 100000;\n\n    Neuro.listenToNetworkStatus();\n  }\n\n  function NeuroBind( scope, target, callback )\n  {\n    if ( !(this instanceof NeuroBind) ) return new NeuroBind( scope, target, callback );\n\n    this.scope = scope;\n    this.target = target;\n    this.callback = callback;\n\n    this.notify = this.newNotification();\n    this.release = this.newRelease();\n\n    this.on();\n  }\n\n  NeuroBind.Events =\n  {\n    Database:     'updated',\n    Model:        'saved removed remote-update relation-update',\n    Collection:   'add adds sort remove reset',\n    Page:         'change',\n    Scope:        '$destroy'\n  };\n\n  NeuroBind.prototype =\n  {\n    on: function()\n    {\n      if ( Neuro.isNeuro( this.target ) )\n      {\n        this.target = this.target.Database;\n      }\n\n      if ( this.target instanceof Neuro.Database )\n      {\n        this.target.on( NeuroBind.Events.Database, this.notify  );\n      }\n      else if ( this.target instanceof Neuro.Model )\n      {\n        this.target.$on( NeuroBind.Events.Model, this.notify );\n      }\n      else if ( this.target instanceof Neuro.Collection )\n      {\n        this.target.on( NeuroBind.Events.Collection, this.notify );\n      }\n      else if ( this.target instanceof Neuro.Page )\n      {\n        this.target.on( NeuroBind.Events.Page, this.notify );\n      }\n\n      this.scope.$on( NeuroBind.Events.Scope, this.release );\n    },\n    off: function()\n    {\n      if ( this.target instanceof Neuro.Database )\n      {\n        this.target.off( NeuroBind.Events.Database, this.notify );\n      }\n      else if ( this.target instanceof Neuro.Model )\n      {\n        this.target.$off( NeuroBind.Events.Model, this.notify );\n      }\n      else if ( this.target instanceof Neuro.Collection )\n      {\n        this.target.off( NeuroBind.Events.Collection, this.notify );\n      }\n      else if ( this.target instanceof Neuro.Page )\n      {\n        this.target.off( NeuroBind.Events.Page, this.notify );\n      }\n    },\n    newRelease: function()\n    {\n      var binder = this;\n\n      return function()\n      {\n        binder.off();\n      };\n    },\n    newNotification: function()\n    {\n      var binder = this;\n\n      return function()\n      {\n        binder.scope.$evalAsync(function()\n        {\n          if ( binder.callback )\n          {\n            binder.callback.apply( binder.target );\n          }\n\n          if ( NeuroSettings.debug )\n          {\n            Neuro.debug( '[Scope:$evalAsync]', binder.scope );\n          }\n        });\n      };\n    }\n  };\n\n  function NeuroSelect(source, select, fill)\n  {\n    this.$onRemove  = Neuro.bind( this, this.$handleRemove );\n    this.$onRemoves = Neuro.bind( this, this.$handleRemoves );\n    this.$onCleared = Neuro.bind( this, this.$handleCleared );\n    this.$onReset   = Neuro.bind( this, this.$handleReset );\n\n    this.$reset( source );\n    this.$select( select, fill );\n  }\n\n  NeuroSelect.prototype =\n  {\n\n    $reset: function(source)\n    {\n      if ( this.$source !== source )\n      {\n        if ( this.$source )\n        {\n          this.$disconnect();\n        }\n\n        this.$source = source;\n        this.$connect();\n      }\n    },\n\n    $connect: function()\n    {\n      this.$source.on( Neuro.Collection.Events.Remove, this.$onRemove );\n      this.$source.on( Neuro.Collection.Events.Removes, this.$onRemoves );\n      this.$source.on( Neuro.Collection.Events.Cleared, this.$onCleared );\n      this.$source.on( Neuro.Collection.Events.Reset, this.$onReset );\n    },\n\n    $disconnect: function()\n    {\n      this.$source.off( Neuro.Collection.Events.Remove, this.$onRemove );\n      this.$source.off( Neuro.Collection.Events.Removes, this.$onRemoves );\n      this.$source.off( Neuro.Collection.Events.Cleared, this.$onCleared );\n      this.$source.off( Neuro.Collection.Events.Reset, this.$onReset );\n    },\n\n    $select: function(select, fill)\n    {\n      if ( Neuro.isArray( select ) )\n      {\n        var db = this.$source.database;\n        var remove = {};\n\n        for (var key in this)\n        {\n          if ( Neuro.isBoolean( this[ key ] ) )\n          {\n            remove[ key ] = this[ key ];\n          }\n        }\n\n        for (var i = 0; i < select.length; i++)\n        {\n          var key = db.buildKeyFromInput( select[ i ] );\n\n          this[ key ] = true;\n\n          delete remove[ key ];\n        }\n\n        for (var key in remove)\n        {\n          delete this[ key ];\n        }\n\n        if ( fill )\n        {\n          var keys = this.$source.keys();\n\n          for (var i = 0; i < keys.length; i++)\n          {\n            var key = keys[ i ];\n\n            if ( !this[ key ] )\n            {\n              this[ key ] = false;\n            }\n          }\n        }\n\n      }\n    },\n\n    $selection: function(out)\n    {\n      var source = this.$source;\n      var selection = out || [];\n\n      for (var key in this)\n      {\n        if ( this[ key ] === true )\n        {\n          var model = source.get( key );\n\n          if ( model )\n          {\n            selection.push( model );\n          }\n        }\n      }\n\n      return selection;\n    },\n\n    $handleRemove: function(removed)\n    {\n      var db = this.$source.database;\n      var key = db.buildKeyFromInput( removed );\n\n      delete this[ key ];\n    },\n\n    $handleRemoves: function(removed)\n    {\n      for (var i = 0; i < removed.length; i++)\n      {\n        this.$handleRemove( removed[i] );\n      }\n    },\n\n    $handleCleared: function()\n    {\n      for (var key in this)\n      {\n        if ( Neuro.isBoolean( this[ key ] ) )\n        {\n          delete this[ key ];\n        }\n      }\n    },\n\n    $handleReset: function()\n    {\n      var source = this.$source;\n\n      for (var key in this)\n      {\n        if ( Neuro.isBoolean( this[ key ] ) )\n        {\n          if ( !source.has( key ) )\n          {\n            delete this[ key ];\n          }\n        }\n      }\n    }\n  };\n\n  Neuro.ModelCollection.prototype.selectable = function(select, fill)\n  {\n    return new NeuroSelect( this, select, fill );\n  };\n\n  function hasModule(moduleName)\n  {\n    if ( moduleName in hasModule.tested )\n    {\n      return hasModule.tested[ moduleName ];\n    }\n\n    try\n    {\n      angular.module( moduleName );\n\n      return hasModule.tested[ moduleName ] = true;\n    }\n    catch (e)\n    {\n      return hasModule.tested[ moduleName ] = false;\n    }\n  }\n\n  hasModule.tested = {};\n\n  function getRouteParameter()\n  {\n    return getRouteParameter.cached ? getRouteParameter.cached : getRouteParameter.cached =\n      ( hasModule( 'ui.router' ) ? '$stateParams' :\n        ( hasModule( 'ngRoute' ) ? '$route' :\n          false ) );\n  }\n\n  function buildParamResolver()\n  {\n    if ( hasModule( 'ui.router') )\n    {\n      return function($stateParams)\n      {\n        return $stateParams;\n      };\n    }\n    else if ( hasModule( 'ngRoute') )\n    {\n      return function($route)\n      {\n        return $route.current;\n      };\n    }\n    return function()\n    {\n      return false;\n    };\n  }\n\n  function buildTemplateResolver(routeParams)\n  {\n    return function(text)\n    {\n      if ( Neuro.isString( text ) && routeParams )\n      {\n        return Neuro.format( text, routeParams );\n      }\n\n      return text;\n    };\n  }\n\n  getRouteParameter.cached = null;\n\n  NeuroResolve.factory = function( name, callback )\n  {\n    var param = getRouteParameter();\n    var paramResolver = buildParamResolver();\n    var cache = false;\n    var cachedValue = void 0;\n\n    function factory($q, routing)\n    {\n      var defer = $q.defer();\n\n      if ( cachedValue !== void 0 )\n      {\n        defer.resolve( cachedValue );\n      }\n      else\n      {\n        var routeParams = paramResolver( routing );\n        var templateResolver = buildTemplateResolver( routeParams );\n\n        if ( cache )\n        {\n          defer.promise.then(function(resolvedValue)\n          {\n            cachedValue = resolvedValue;\n          });\n        }\n\n        Neuro.get( name, function(model)\n        {\n          callback( model, defer, templateResolver );\n        });\n      }\n\n      return defer.promise;\n    }\n\n    factory.$inject = ['$q'];\n\n    if ( param )\n    {\n      factory.$inject.push( param );\n    }\n\n    factory.cache = function()\n    {\n      cache = true;\n\n      return factory;\n    };\n\n    factory.inject = function()\n    {\n      for (var i = 0; i < arguments.length; i++)\n      {\n        var arg = arguments[ i ];\n\n        if ( Neuro.isArray( arg ) )\n        {\n          factory.$inject.push.apply( factory.$inject, arg );\n        }\n        else\n        {\n          factory.$inject.push( arg );\n        }\n      }\n\n      return factory;\n    };\n\n    return factory;\n  };\n\n  function ResolveInput(obj, resolver)\n  {\n    if ( Neuro.isObject( obj ) )\n    {\n      var resolved = {};\n\n      for (var prop in obj)\n      {\n        resolved[ prop ] = resolver( obj[ prop ] );\n      }\n\n      return resolved;\n    }\n\n    return resolver( obj );\n  }\n\n  NeuroResolve.model = function( name, input )\n  {\n    return NeuroResolve.factory( name, function(model, defer, templateResolver)\n    {\n      var resolvedInput = ResolveInput( input, templateResolver );\n\n      model.Database.grabModel( resolvedInput, function(instance)\n      {\n        if ( instance )\n        {\n          defer.resolve( instance );\n        }\n        else\n        {\n          defer.reject();\n        }\n      });\n    });\n  };\n\n  NeuroResolve.fetch = function( name, input )\n  {\n    return NeuroResolve.factory( name, function(model, defer, templateResolver)\n    {\n      var resolvedInput = ResolveInput( input, templateResolver );\n\n      model.fetch( resolvedInput, function(instance)\n      {\n        defer.resolve( instance );\n      });\n    });\n  };\n\n  NeuroResolve.fetchAll = function( name )\n  {\n    return NeuroResolve.factory( name, function(model, defer, templateResolver)\n    {\n      model.fetchAll(function(models)\n      {\n        defer.resolve( models );\n      });\n    });\n  };\n\n  NeuroResolve.grab = function( name, input )\n  {\n    return NeuroResolve.factory( name, function(model, defer, templateResolver)\n    {\n      var resolvedInput = ResolveInput( input, templateResolver );\n\n      model.grab( resolvedInput, function(instance)\n      {\n        defer.resolve( instance );\n      });\n    });\n  };\n\n  NeuroResolve.grabAll = function( name )\n  {\n    return NeuroResolve.factory( name, function(model, defer, templateResolver)\n    {\n      model.grabAll(function(models)\n      {\n        defer.resolve( models );\n      });\n    });\n  };\n\n  NeuroResolve.create = function( name, properties, dontSave )\n  {\n    return NeuroResolve.factory( name, function(model, defer, templateResolver)\n    {\n      var resolvedProperties = ResolveInput( properties, templateResolver );\n\n      if ( dontSave )\n      {\n        defer.resolve( new model( resolvedProperties ) );\n      }\n      else\n      {\n        var instance = model.create( resolvedProperties );\n\n        if ( instance.$isSaved() )\n        {\n          defer.resolve( instance );\n        }\n        else\n        {\n          instance.$once( Neuro.Model.Events.RemoteSaves, function()\n          {\n            defer.resolve( instance );\n          });\n        }\n      }\n    });\n  };\n\n  NeuroResolve.query = function( name, query )\n  {\n    return NeuroResolve.factory( name, function(model, defer, templateResolver)\n    {\n      var resolvedQuery = ResolveInput( query, templateResolver );\n      var remoteQuery = model.query( resolvedQuery );\n\n      remoteQuery.success(function()\n      {\n        defer.resolve( remoteQuery );\n      });\n\n      remoteQuery.failure(function()\n      {\n        defer.reject();\n      });\n    });\n  };\n\n  NeuroResolve.all = function( name )\n  {\n    return NeuroResolve.factory( name, function(model, defer, templateResolver)\n    {\n      model.Database.ready(function()\n      {\n        defer.resolve( model.all() );\n      });\n    });\n  };\n\n  NeuroResolve.where = function( name, whereProperties, whereValue, whereEquals )\n  {\n    return NeuroResolve.factory( name, function(model, defer, templateResolver)\n    {\n      var resolvedWhereProperties = ResolveInput( whereProperties, templateResolver );\n      var resolvedWhereValue = ResolveInput( whereValue, templateResolver );\n\n      model.Database.ready(function()\n      {\n        defer.resolve( model.all().filtered( resolvedWhereProperties, resolvedWhereValue, whereEquals ) );\n      });\n    });\n  };\n\n})( angular.module('neurosync', []), this );\n"],"sourceRoot":"/source/"}