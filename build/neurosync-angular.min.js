!function(t,e,n){function o(t){Neuro.rest=function(e){function o(e,n,o,a,i,r){function s(t){a(t.data)}function u(t){i(t.data,t.status)}if(Neuro.debug(Neuro.Debugs.REST,this,e,o,n),Neuro.forceOffline)i(r,0);else{var c={method:e,data:n,url:o};t(c).then(s,u)}}return{all:function(t,a){o("GET",n,e.api,t,a,[])},get:function(t,a,i){o("GET",n,e.api+t.$key(),a,i)},create:function(t,n,a,i){o("POST",n,e.api,a,i,{})},update:function(t,n,a,i){o("PUT",n,e.api+t.$key(),a,i,{})},remove:function(t,a,i){o("DELETE",n,e.api+t.$key(),a,i,{})},query:function(t,e,a){var i=t.method||"GET",r=t.data||n,s=t.url||t;o(i,r,s,e,a)}}};var e=Neuro.debug;return Neuro.debug=function(){r.debug&&e.apply(this,arguments)},Neuro.Debugs.ScopeEval=1e5,Neuro.listenToNetworkStatus(),Neuro}function a(){return i}function i(t,e,n){return this instanceof i?(this.scope=t,this.target=e,this.callback=n,this.notify=this.newNotification(),this.release=this.newRelease(),void this.on()):new i(t,e,n)}var r={debug:!1},s={};t.constant("NeuroResolve",s).constant("NeuroSettings",r).factory("Neuro",["$http",o]).factory("NeuroBind",a),e.NeuroBind=i,e.NeuroResolve=s,i.Events={Database:"updated",Model:"saved removed remote-update relation-update",Collection:"add adds sort remove reset",Page:"change",Scope:"$destroy"},i.prototype={on:function(){Neuro.isNeuro(this.target)&&(this.target=this.target.Database),this.target instanceof Neuro.Database?this.target.on(i.Events.Database,this.notify):this.target instanceof Neuro.Model?this.target.$on(i.Events.Model,this.notify):this.target instanceof Neuro.Collection?this.target.on(i.Events.Collection,this.notify):this.target instanceof Neuro.Page&&this.target.on(i.Events.Page,this.notify),this.scope.$on(i.Events.Scope,this.release)},off:function(){this.target instanceof Neuro.Database?this.target.off(i.Events.Database,this.notify):this.target instanceof Neuro.Model?this.target.$off(i.Events.Model,this.notify):this.target instanceof Neuro.Collection?this.target.off(i.Events.Collection,this.notify):this.target instanceof Neuro.Page&&this.target.off(i.Events.Page,this.notify)},newRelease:function(){var t=this;return function(){t.off()}},newNotification:function(){var t=this;return function(){t.scope.$evalAsync(function(){t.callback&&t.callback.apply(t.target),r.debug&&Neuro.debug("[Scope:$evalAsync]",t.scope)})}}},s.factory=function(t,e){return["$q",function(n){var o=n.defer();return Neuro.get(t,function(t){e(t,o)}),o.promise}]},s.model=function(t,e){return s.factory(t,function(t,n){t.grabModel(e,function(t){t?n.resolve(t):n.reject()})})},s.fetch=function(t,e){return s.factory(t,function(t,n){n.resolve(t.fetch(e))})},s.query=function(t,e){return s.factory(t,function(t,n){var o=t.query(e);o.success(function(){n.resolve(o)}),o.failure(function(){n.reject()})})},s.all=function(t){return s.factory(t,function(t,e){t.Database.ready(function(){e.resolve(t.all())})})},s.where=function(t,e,n,o){return s.factory(t,function(t,a){t.Database.ready(function(){a.resolve(t.all().filtered(e,n,o))})})}}(angular.module("neurosync",[]),window);
//# sourceMappingURL=neurosync-angular.min.js.map
