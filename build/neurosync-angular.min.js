!function(t,e){function n(t){Neuro.rest=function(n){function o(e,n,o,a,i,s){function r(t){a(t.data)}function u(t){i(t.data,t.status)}if(Neuro.debug(Neuro.Debugs.REST,this,e,o,n),Neuro.forceOffline)i(s,0);else{var c={method:e,data:n,url:o};t(c).then(r,u)}}return{all:function(t,a){o("GET",e,n.api,t,a,[])},get:function(t,a,i){o("GET",e,n.api+t.$key(),a,i)},create:function(t,e,a,i){o("POST",e,n.api,a,i,{})},update:function(t,e,a,i){o("PUT",e,n.api+t.$key(),a,i,{})},remove:function(t,a,i){o("DELETE",e,n.api+t.$key(),a,i,{})}}};var n=Neuro.debug;return Neuro.debug=function(){a.debug&&n.apply(this,arguments)},Neuro.Debugs.ScopeEval=1e5,Neuro.listenToNetworkStatus(),Neuro}function o(t){function e(t,n,o){return this instanceof e?(this.scope=t,this.target=n,this.callback=o,this.notify=this.newNotification(),this.release=this.newRelease(),void this.on()):new e(t,n,o)}return e.Events={Database:"updated",Model:"saved removed remote-update relation-update",Scope:"$destroy"},e.prototype={on:function(){Neuro.isNeuro(this.target)&&(this.target=this.target.Database),this.target instanceof Neuro.Database?this.target.on(e.Events.Database,this.notify):this.target instanceof Neuro.Model&&this.target.$on(e.Events.Model,this.notify),this.scope.$on(e.Events.Scope,this.release)},off:function(){this.target instanceof Neuro.Database?this.target.off(e.Events.Database,this.notify):this.target instanceof Neuro.Model&&this.target.$off(e.Events.Model,this.notify)},newRelease:function(){var t=this;return function(){t.off()}},newNotification:function(){var t=this;return function(){t.scope.$evalAsync(function(){t.callback&&t.callback.apply(t.target),a.debug&&Neuro.debug("[Scope:$evalAsync]",t.scope)})}}},e}var a={debug:!1};t.constant("NeuroSettings",a).factory("Neuro",["$http",n]).factory("NeuroBind",["$log",o])}(angular.module("neurosync",[]));
//# sourceMappingURL=neurosync-angular.min.js.map
