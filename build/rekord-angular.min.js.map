{"version":3,"sources":["rekord-angular.min.js"],"names":["global","Rekord","ng","app","undefined","removeTrailingSlash","x","charAt","length","substring","InitializeRekord","$http","$filter","execute","method","data","url","success","failure","offlineValue","debug","Debugs","REST","this","forceOffline","onRestSuccess","response","onRestError","status","options","then","RestFactory","database","all","api","get","model","$key","create","encoded","update","remove","query","isEmpty","formatDate","date","format","setRest","listenToNetworkStatus","Sync","scope","target","callback","on","Select","source","select","fill","$onRemove","bind","$handleRemove","$onRemoves","$handleRemoves","$onCleared","$handleCleared","$onReset","$handleReset","$reset","$select","hasModule","moduleName","tested","module","e","getRouteParameter","cached","buildParamResolver","$stateParams","$route","current","buildTemplateResolver","routeParams","text","isString","ResolveInput","obj","resolver","isObject","resolved","prop","ModelFilter","models","toArray","array","ids","i","splice","isFunction","isArray","isBoolean","isRekord","Resolve","Factory","a","Array","prototype","Database","targetFunction","$change","off","notify","$on","$evalAsync","apply","ScopeDigest","$source","$disconnect","$connect","Collection","Events","Remove","Removes","Cleared","Reset","db","key","buildKeyFromInput","keys","$selection","out","selection","push","removed","has","ModelCollection","selectable","factory","name","$q","routing","defer","cachedValue","resolve","paramResolver","templateResolver","cache","promise","resolvedValue","param","$inject","inject","arguments","arg","input","resolvedInput","grabModel","instance","reject","fetch","fetchAll","grab","grabAll","properties","dontSave","resolvedProperties","$isSaved","$once","Model","RemoteSaves","search","props","resolvedQuery","remoteQuery","$promise","ready","where","whereProperties","whereValue","whereEquals","resolvedWhereProperties","resolvedWhereValue","filtered","helper","impl","ref","rekord","run","paged","searchPaged","context","lazyLoad","initialized","remoteLoaded","refresh","value","equals","filter","Bind","angular"],"mappings":"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","file":"rekord-angular.min.js","sourcesContent":["(function (global, Rekord, ng, app, undefined)\n{\n\n  var isFunction = Rekord.isFunction;\n  var isString = Rekord.isString;\n  var isArray = Rekord.isArray;\n  var isObject = Rekord.isObject;\n  var isBoolean = Rekord.isBoolean;\n  var isRekord = Rekord.isRekord;\n  var isEmpty = Rekord.isEmpty;\n\n  var format = Rekord.format;\n  var bind = Rekord.bind;\n\n  var Resolve = {};\n  var Factory = {};\n\n  ng.isArray = function(a)\n  {\n    return a instanceof Array;\n  };\n\n\nfunction removeTrailingSlash(x)\n{\n  return x.charAt(x.length - 1) === '/' ? x.substring(0, x.length - 1) : x;\n}\n\nfunction InitializeRekord($http, $filter)\n{\n  function execute( method, data, url, success, failure, offlineValue )\n  {\n    Rekord.debug( Rekord.Debugs.REST, this, method, url, data );\n\n    if ( Rekord.forceOffline )\n    {\n      failure( offlineValue, 0 );\n    }\n    else\n    {\n      var onRestSuccess = function(response)\n      {\n        success( response.data );\n      };\n\n      var onRestError = function(response)\n      {\n        failure( response.data, response.status );\n      };\n\n      var options =\n      {\n        method: method,\n        data: data,\n        url: url\n      };\n\n      $http( options ).then( onRestSuccess, onRestError );\n    }\n  }\n\n  function RestFactory(database)\n  {\n    return {\n      all: function( success, failure )\n      {\n        execute( 'GET', undefined, database.api, success, failure, [] );\n      },\n      get: function( model, success, failure )\n      {\n        execute( 'GET', undefined, removeTrailingSlash( database.api + model.$key() ), success, failure );\n      },\n      create: function( model, encoded, success, failure )\n      {\n        execute( 'POST', encoded, removeTrailingSlash( database.api ), success, failure, {} );\n      },\n      update: function( model, encoded, success, failure )\n      {\n        execute( 'PUT', encoded, removeTrailingSlash( database.api + model.$key() ), success, failure, {} );\n      },\n      remove: function( model, success, failure )\n      {\n        execute( 'DELETE', undefined, removeTrailingSlash( database.api + model.$key() ), success, failure, {} );\n      },\n      query: function( url, data, success, failure )\n      {\n        var method = isEmpty( data ) ? 'GET' : 'POST';\n\n        execute( method, data, url, success, failure );\n      }\n    };\n  }\n\n  function formatDate(date, format)\n  {\n    return $filter('date')( date, format );\n  }\n\n  Rekord.setRest( RestFactory );\n  Rekord.listenToNetworkStatus();\n\n  Rekord.formatDate = formatDate;\n}\n\nfunction Sync( scope, target, callback )\n{\n  if ( !(this instanceof Sync) )\n  {\n    return new Sync( scope, target, callback );\n  }\n\n  this.scope = scope;\n  this.target = target;\n  this.callback = callback;\n\n  this.on();\n}\n\nSync.prototype =\n{\n  on: function()\n  {\n    var target = this.target;\n\n    if ( isRekord( target ) )\n    {\n      target = this.target = target.Database;\n    }\n\n    var targetFunction = target.$change ? '$change' : 'change';\n\n    if ( target[ targetFunction ] )\n    {\n      this.off = target[ targetFunction ]( this.notify, this );\n\n      this.scope.$on( '$destroy', this.off );\n    }\n  },\n  notify: function()\n  {\n    // $digest would be better for performance - but there's no official way\n    // to see if a digest cycle is currently running\n    this.scope.$evalAsync();\n\n    if ( isFunction( this.callback ) )\n    {\n      this.callback.apply( this.target );\n    }\n\n    Rekord.debug( Rekord.Debugs.ScopeDigest, this, this.scope );\n  }\n};\n\n\nfunction Select(source, select, fill)\n{\n  this.$onRemove  = bind( this, this.$handleRemove );\n  this.$onRemoves = bind( this, this.$handleRemoves );\n  this.$onCleared = bind( this, this.$handleCleared );\n  this.$onReset   = bind( this, this.$handleReset );\n\n  this.$reset( source );\n  this.$select( select, fill );\n}\n\nSelect.prototype =\n{\n\n  $reset: function(source)\n  {\n    if ( this.$source !== source )\n    {\n      if ( this.$source )\n      {\n        this.$disconnect();\n      }\n\n      this.$source = source;\n      this.$connect();\n    }\n  },\n\n  $connect: function()\n  {\n    this.$source.on( Rekord.Collection.Events.Remove, this.$onRemove );\n    this.$source.on( Rekord.Collection.Events.Removes, this.$onRemoves );\n    this.$source.on( Rekord.Collection.Events.Cleared, this.$onCleared );\n    this.$source.on( Rekord.Collection.Events.Reset, this.$onReset );\n  },\n\n  $disconnect: function()\n  {\n    this.$source.off( Rekord.Collection.Events.Remove, this.$onRemove );\n    this.$source.off( Rekord.Collection.Events.Removes, this.$onRemoves );\n    this.$source.off( Rekord.Collection.Events.Cleared, this.$onCleared );\n    this.$source.off( Rekord.Collection.Events.Reset, this.$onReset );\n  },\n\n  $select: function(select, fill)\n  {\n    if ( isArray( select ) )\n    {\n      var db = this.$source.database;\n      var remove = {};\n\n      for (var key in this)\n      {\n        if ( isBoolean( this[ key ] ) )\n        {\n          remove[ key ] = this[ key ];\n        }\n      }\n\n      for (var i = 0; i < select.length; i++)\n      {\n        var key = db.buildKeyFromInput( select[ i ] );\n\n        this[ key ] = true;\n\n        delete remove[ key ];\n      }\n\n      for (var key in remove)\n      {\n        delete this[ key ];\n      }\n\n      if ( fill )\n      {\n        var keys = this.$source.keys();\n\n        for (var i = 0; i < keys.length; i++)\n        {\n          var key = keys[ i ];\n\n          if ( !this[ key ] )\n          {\n            this[ key ] = false;\n          }\n        }\n      }\n\n    }\n  },\n\n  $selection: function(out)\n  {\n    var source = this.$source;\n    var selection = out || [];\n\n    for (var key in this)\n    {\n      if ( this[ key ] === true )\n      {\n        var model = source.get( key );\n\n        if ( model )\n        {\n          selection.push( model );\n        }\n      }\n    }\n\n    return selection;\n  },\n\n  $handleRemove: function(removed)\n  {\n    var db = this.$source.database;\n    var key = db.buildKeyFromInput( removed );\n\n    delete this[ key ];\n  },\n\n  $handleRemoves: function(removed)\n  {\n    for (var i = 0; i < removed.length; i++)\n    {\n      this.$handleRemove( removed[i] );\n    }\n  },\n\n  $handleCleared: function()\n  {\n    for (var key in this)\n    {\n      if ( isBoolean( this[ key ] ) )\n      {\n        delete this[ key ];\n      }\n    }\n  },\n\n  $handleReset: function()\n  {\n    var source = this.$source;\n\n    for (var key in this)\n    {\n      if ( isBoolean( this[ key ] ) )\n      {\n        if ( !source.has( key ) )\n        {\n          delete this[ key ];\n        }\n      }\n    }\n  }\n};\n\nRekord.ModelCollection.prototype.selectable = function(select, fill)\n{\n  return new Select( this, select, fill );\n};\n\n\nfunction hasModule(moduleName)\n{\n  if ( moduleName in hasModule.tested )\n  {\n    return hasModule.tested[ moduleName ];\n  }\n\n  try\n  {\n    ng.module( moduleName );\n\n    hasModule.tested[ moduleName ] = true;\n  }\n  catch (e)\n  {\n    hasModule.tested[ moduleName ] = false;\n  }\n\n  return hasModule.tested[ moduleName ];\n}\n\nhasModule.tested = {};\n\nfunction getRouteParameter()\n{\n  return getRouteParameter.cached ? getRouteParameter.cached : getRouteParameter.cached =\n    ( hasModule( 'ui.router' ) ? '$stateParams' :\n      ( hasModule( 'ngRoute' ) ? '$route' :\n        false ) );\n}\n\nfunction buildParamResolver()\n{\n  if ( hasModule( 'ui.router') )\n  {\n    return function($stateParams)\n    {\n      return $stateParams;\n    };\n  }\n  else if ( hasModule( 'ngRoute') )\n  {\n    return function($route)\n    {\n      return $route.current;\n    };\n  }\n  return function()\n  {\n    return false;\n  };\n}\n\nfunction buildTemplateResolver(routeParams)\n{\n  return function(text)\n  {\n    if ( isString( text ) && routeParams )\n    {\n      return format( text, routeParams );\n    }\n\n    return text;\n  };\n}\n\ngetRouteParameter.cached = null;\n\nResolve.factory = function( name, callback )\n{\n  var param = getRouteParameter();\n  var paramResolver = buildParamResolver();\n  var cache = false;\n  var cachedValue = void 0;\n\n  function factory($q, routing)\n  {\n    var defer = $q.defer();\n\n    if ( cachedValue !== void 0 )\n    {\n      defer.resolve( cachedValue );\n    }\n    else\n    {\n      var routeParams = paramResolver( routing );\n      var templateResolver = buildTemplateResolver( routeParams );\n\n      if ( cache )\n      {\n        defer.promise.then(function(resolvedValue)\n        {\n          cachedValue = resolvedValue;\n        });\n      }\n\n      Rekord.get( name ).success(function(model)\n      {\n        callback( model, defer, templateResolver );\n      });\n    }\n\n    return defer.promise;\n  }\n\n  factory.$inject = ['$q'];\n\n  if ( param )\n  {\n    factory.$inject.push( param );\n  }\n\n  factory.cache = function()\n  {\n    cache = true;\n\n    return factory;\n  };\n\n  factory.inject = function()\n  {\n    for (var i = 0; i < arguments.length; i++)\n    {\n      var arg = arguments[ i ];\n\n      if ( isArray( arg ) )\n      {\n        factory.$inject.push.apply( factory.$inject, arg );\n      }\n      else\n      {\n        factory.$inject.push( arg );\n      }\n    }\n\n    return factory;\n  };\n\n  return factory;\n};\n\nfunction ResolveInput(obj, resolver)\n{\n  if ( isObject( obj ) )\n  {\n    var resolved = {};\n\n    for (var prop in obj)\n    {\n      resolved[ prop ] = resolver( obj[ prop ] );\n    }\n\n    return resolved;\n  }\n\n  return resolver( obj );\n}\n\nResolve.model = function( name, input )\n{\n  return Resolve.factory( name, function(model, defer, templateResolver)\n  {\n    var resolvedInput = ResolveInput( input, templateResolver );\n\n    model.Database.grabModel( resolvedInput, function(instance)\n    {\n      if ( instance )\n      {\n        defer.resolve( instance );\n      }\n      else\n      {\n        defer.reject();\n      }\n    });\n  });\n};\n\nResolve.fetch = function( name, input )\n{\n  return Resolve.factory( name, function(model, defer, templateResolver)\n  {\n    var resolvedInput = ResolveInput( input, templateResolver );\n\n    model.fetch( resolvedInput, function(instance)\n    {\n      defer.resolve( instance );\n    });\n  });\n};\n\nResolve.fetchAll = function( name )\n{\n  return Resolve.factory( name, function(model, defer, templateResolver)\n  {\n    model.fetchAll(function(models)\n    {\n      defer.resolve( models );\n    });\n  });\n};\n\nResolve.grab = function( name, input )\n{\n  return Resolve.factory( name, function(model, defer, templateResolver)\n  {\n    var resolvedInput = ResolveInput( input, templateResolver );\n\n    model.grab( resolvedInput, function(instance)\n    {\n      defer.resolve( instance );\n    });\n  });\n};\n\nResolve.grabAll = function( name )\n{\n  return Resolve.factory( name, function(model, defer, templateResolver)\n  {\n    model.grabAll(function(models)\n    {\n      defer.resolve( models );\n    });\n  });\n};\n\nResolve.create = function( name, properties, dontSave )\n{\n  return Resolve.factory( name, function(model, defer, templateResolver)\n  {\n    var resolvedProperties = ResolveInput( properties, templateResolver );\n\n    if ( dontSave )\n    {\n      defer.resolve( new model( resolvedProperties ) );\n    }\n    else\n    {\n      var instance = model.create( resolvedProperties );\n\n      if ( instance.$isSaved() )\n      {\n        defer.resolve( instance );\n      }\n      else\n      {\n        instance.$once( Rekord.Model.Events.RemoteSaves, function()\n        {\n          defer.resolve( instance );\n        });\n      }\n    }\n  });\n};\n\nResolve.search = function( name, url, options, props )\n{\n  return Resolve.factory( name, function(model, defer, templateResolver)\n  {\n    var resolvedQuery = ResolveInput( url, templateResolver );\n    var remoteQuery = model.search( resolvedQuery, options, props, true );\n\n    remoteQuery.$promise.success(function()\n    {\n      defer.resolve( remoteQuery );\n    });\n\n    remoteQuery.$promise.failure(function()\n    {\n      defer.reject();\n    });\n  });\n};\n\nResolve.all = function( name )\n{\n  return Resolve.factory( name, function(model, defer, templateResolver)\n  {\n    model.Database.ready(function()\n    {\n      defer.resolve( model.all() );\n    });\n  });\n};\n\nResolve.where = function( name, whereProperties, whereValue, whereEquals )\n{\n  return Resolve.factory( name, function(model, defer, templateResolver)\n  {\n    var resolvedWhereProperties = ResolveInput( whereProperties, templateResolver );\n    var resolvedWhereValue = ResolveInput( whereValue, templateResolver );\n\n    model.Database.ready(function()\n    {\n      defer.resolve( model.all().filtered( resolvedWhereProperties, resolvedWhereValue, whereEquals ) );\n    });\n  });\n};\n\nFactory.helper = function(name, impl)\n{\n  var ref = null;\n\n  Rekord.get( name ).success(function(rekord)\n  {\n    ref = rekord;\n  });\n\n  return function FactoryImplementation()\n  {\n    if ( !ref )\n    {\n      throw name + ' Rekord failed to load or does not exist.';\n    }\n\n    return impl( ref );\n  };\n};\n\nFactory.search = function(name, url, options, props, run, paged)\n{\n  return Factory.helper( name, function(model)\n  {\n    return paged ?\n      model.searchPaged( url, options, props, run ) :\n      model.search( url, options, props, run );\n  });\n};\n\nFactory.ref = function(name, callback, context)\n{\n  return Factory.helper( name, function(model)\n  {\n    return model;\n  });\n};\n\nFactory.lazyLoad = function(name, callback, context)\n{\n  var initialized = {};\n\n  return Factory.helper( name, function(model)\n  {\n    if ( !model.Database.remoteLoaded && !(name in initialized) )\n    {\n      initialized[ name ] = true;\n\n      model.Database.refresh( callback, context );\n    }\n\n    return model;\n  });\n};\n\nFactory.filtered = function(name, where, value, equals)\n{\n  return Factory.helper( name, function(model)\n  {\n    return model.filtered( where, value, equals );\n  });\n};\n\nFactory.all = function(name)\n{\n  return Factory.helper( name, function(model)\n  {\n    return model.all();\n  });\n};\n\nFactory.fetchAll = function(name, callback, context)\n{\n  return Factory.helper( name, function(model)\n  {\n    return model.fetchAll( callback, context );\n  });\n};\n\nFactory.grabAll = function(name, callback, context)\n{\n  return Factory.helper( name, function(model)\n  {\n    return model.grabAll( callback, context );\n  });\n};\n\n\nfunction ModelFilter()\n{\n  return function filterModels(models)\n  {\n    if ( !models || !models.toArray )\n    {\n      return models;\n    }\n\n    var array = models.toArray();\n    var ids = {};\n\n    for (var i = 0; i < array.length; i++)\n    {\n      var model = array[ i ];\n\n      if ( !model.$key || model.$key() in ids )\n      {\n        array.splice( i--, 1 );\n      }\n      else\n      {\n        ids[ model.$key() ] = model;\n      }\n    }\n\n    return array;\n  };\n}\n\n\n  app\n    .run( ['$http', '$filter', InitializeRekord] )\n    .filter( 'models', ModelFilter )\n  ;\n\n  Rekord.Bind = Sync;\n  Rekord.Sync = Sync;\n  Rekord.Resolve = Resolve;\n  Rekord.Select = Select;\n  Rekord.Factory = Factory;\n  Rekord.Debugs.ScopeDigest = 100000;\n\n})( this, this.Rekord, this.angular, this.angular.module('rekord', []) );\n"],"sourceRoot":"/source/"}