{"version":3,"sources":["rekord-angular.min.js"],"names":["root","factory","define","amd","Rekord","angular","module","exports","global","require","this","ng","undefined","InitializeRekord","$http","$filter","Rest","database","RestFactory","api","Rekord_rest","call","ajax","options","success","failure","then","formatDate","date","format","prototype","removeTrailingSlash","x","charAt","length","substring","all","execute","get","model","$key","create","encoded","update","remove","query","url","data","method","isEmpty","offlineValue","debug","Debugs","REST","forceOffline","onRestSuccess","response","onRestError","status","transfer","Angular","adjustOptions","setRest","listenToNetworkStatus","rest","noop","RestClass","Sync","scope","target","callback","on","Select","source","select","fill","$onRemove","bind","$handleRemove","$onRemoves","$handleRemoves","$onCleared","$handleCleared","$onReset","$handleReset","$reset","$select","hasModule","moduleName","tested","e","getRouteParameter","cached","buildParamResolver","$stateParams","$route","current","buildTemplateResolver","routeParams","text","isString","ResolveInput","obj","resolver","isObject","resolved","prop","ModelFilter","models","toArray","array","ids","i","splice","app","isFunction","isArray","isBoolean","isRekord","Resolve","Factory","a","Array","Database","targetFunction","$change","off","notify","$on","$evalAsync","apply","ScopeDigest","$source","$disconnect","$connect","Collection","Events","Remove","Removes","Cleared","Reset","db","key","keyHandler","buildKeyFromInput","keys","$selection","out","selection","push","removed","has","ModelCollection","selectable","name","$q","routing","defer","cachedValue","resolve","paramResolver","templateResolver","cache","promise","resolvedValue","param","$inject","inject","arguments","arg","input","resolvedInput","grabModel","instance","reject","fetch","fetchAll","grab","grabAll","properties","dontSave","resolvedProperties","$isSaved","$once","Model","RemoteSaves","search","props","resolvedQuery","remoteQuery","$promise","ready","where","whereProperties","whereValue","whereEquals","resolvedWhereProperties","resolvedWhereValue","filtered","helper","impl","ref","rekord","run","paged","searchPaged","context","lazyLoad","initialized","remoteLoaded","refresh","value","equals","filter","Bind"],"mappings":"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","file":"rekord-angular.min.js","sourcesContent":["/* rekord-angular 1.4.3 - A rekord binding to angular - implementing Rekord.rest by Philip Diffenderfer */\n// UMD (Universal Module Definition)\n(function (root, factory)\n{\n  if (typeof define === 'function' && define.amd) // jshint ignore:line\n  {\n    // AMD. Register as an anonymous module.\n    define(['Rekord', 'angular'], function(Rekord, angular) { // jshint ignore:line\n      return factory(root, Rekord, angular);\n    });\n  }\n  else if (typeof module === 'object' && module.exports)  // jshint ignore:line\n  {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory(global, require('Rekord'), require('angular'));  // jshint ignore:line\n  }\n  else\n  {\n    // Browser globals (root is window)\n    root.Rekord = factory(root, root.Rekord, root.angular);\n  }\n}(this, function(global, Rekord, ng, undefined)\n{\n\n  var app = ng.module('rekord', []);\n\n  var isFunction = Rekord.isFunction;\n  var isString = Rekord.isString;\n  var isArray = Rekord.isArray;\n  var isObject = Rekord.isObject;\n  var isBoolean = Rekord.isBoolean;\n  var isRekord = Rekord.isRekord;\n  var isEmpty = Rekord.isEmpty;\n\n  var format = Rekord.format;\n  var bind = Rekord.bind;\n  var noop = Rekord.noop;\n  var transfer = Rekord.transfer;\n\n  var Rekord_rest = Rekord.rest;\n\n  var Resolve = {};\n  var Factory = {};\n\n  ng.isArray = function(a)\n  {\n    return a instanceof Array;\n  };\n\n\nfunction InitializeRekord($http, $filter)\n{\n  function Rest(database)\n  {\n    this.database = database;\n  }\n\n  Rest.prototype =\n  {\n    removeTrailingSlash: function(x)\n    {\n      return x.charAt(x.length - 1) === '/' ? x.substring(0, x.length - 1) : x;\n    },\n    all: function( success, failure )\n    {\n      this.execute( 'GET', null, undefined, this.database.api, success, failure, [] );\n    },\n    get: function( model, success, failure )\n    {\n      this.execute( 'GET', model, undefined, this.removeTrailingSlash( this.database.api + model.$key() ), success, failure );\n    },\n    create: function( model, encoded, success, failure )\n    {\n      this.execute( 'POST', model, encoded, this.removeTrailingSlash( this.database.api ), success, failure, {} );\n    },\n    update: function( model, encoded, success, failure )\n    {\n      this.execute( 'PUT', model, encoded, this.removeTrailingSlash( this.database.api + model.$key() ), success, failure, {} );\n    },\n    remove: function( model, success, failure )\n    {\n      this.execute( 'DELETE', model, undefined, this.removeTrailingSlash( this.database.api + model.$key() ), success, failure, {} );\n    },\n    query: function( url, data, success, failure )\n    {\n      var method = isEmpty( data ) ? 'GET' : 'POST';\n\n      this.execute( method, null, data, url, success, failure );\n    },\n    execute: function( method, model, data, url, success, failure, offlineValue )\n    {\n      Rekord.debug( Rekord.Debugs.REST, this, method, url, data );\n\n      if ( Rekord.forceOffline )\n      {\n        failure( offlineValue, 0 );\n      }\n      else\n      {\n        var onRestSuccess = function(response)\n        {\n          success( response.data );\n        };\n\n        var onRestError = function(response)\n        {\n          failure( response.data, response.status );\n        };\n\n        var options = transfer( Rekord.Angular.options, {\n          method: method,\n          data: data,\n          url: url\n        });\n\n        Rekord.Angular.adjustOptions( options, this.database, method, model, data, url, success, failure );\n        Rekord.Angular.ajax( options, onRestSuccess, onRestError );\n      }\n    }\n  };\n\n  function RestFactory(database)\n  {\n    if ( !database.api )\n    {\n      return Rekord_rest.call( this, database );\n    }\n\n    return new Rest( database );\n  }\n\n  function ajax(options, success, failure)\n  {\n    $http( options ).then( success, failure );\n  }\n\n  function formatDate(date, format)\n  {\n    return $filter('date')( date, format );\n  }\n\n  Rekord.setRest( RestFactory );\n  Rekord.listenToNetworkStatus();\n\n  Rekord.formatDate = formatDate;\n\n  Rekord.Angular =\n  {\n    rest: RestFactory,\n    options: {},\n    adjustOptions: noop,\n    ajax: ajax,\n    RestClass: Rest\n  };\n}\n\nfunction Sync( scope, target, callback )\n{\n  if ( !(this instanceof Sync) )\n  {\n    return new Sync( scope, target, callback );\n  }\n\n  this.scope = scope;\n  this.target = target;\n  this.callback = callback;\n\n  this.on();\n}\n\nSync.prototype =\n{\n  on: function()\n  {\n    var target = this.target;\n\n    if ( isRekord( target ) )\n    {\n      target = this.target = target.Database;\n    }\n\n    var targetFunction = target.$change ? '$change' : 'change';\n\n    if ( target[ targetFunction ] )\n    {\n      this.off = target[ targetFunction ]( this.notify, this );\n\n      this.scope.$on( '$destroy', this.off );\n    }\n  },\n  notify: function()\n  {\n    // $digest would be better for performance - but there's no official way\n    // to see if a digest cycle is currently running\n    this.scope.$evalAsync();\n\n    if ( isFunction( this.callback ) )\n    {\n      this.callback.apply( this.target );\n    }\n\n    Rekord.debug( Rekord.Debugs.ScopeDigest, this, this.scope );\n  }\n};\n\n\nfunction Select(source, select, fill)\n{\n  this.$onRemove  = bind( this, this.$handleRemove );\n  this.$onRemoves = bind( this, this.$handleRemoves );\n  this.$onCleared = bind( this, this.$handleCleared );\n  this.$onReset   = bind( this, this.$handleReset );\n\n  this.$reset( source );\n  this.$select( select, fill );\n}\n\nSelect.prototype =\n{\n\n  $reset: function(source)\n  {\n    if ( this.$source !== source )\n    {\n      if ( this.$source )\n      {\n        this.$disconnect();\n      }\n\n      this.$source = source;\n      this.$connect();\n    }\n  },\n\n  $connect: function()\n  {\n    this.$source.on( Rekord.Collection.Events.Remove, this.$onRemove );\n    this.$source.on( Rekord.Collection.Events.Removes, this.$onRemoves );\n    this.$source.on( Rekord.Collection.Events.Cleared, this.$onCleared );\n    this.$source.on( Rekord.Collection.Events.Reset, this.$onReset );\n  },\n\n  $disconnect: function()\n  {\n    this.$source.off( Rekord.Collection.Events.Remove, this.$onRemove );\n    this.$source.off( Rekord.Collection.Events.Removes, this.$onRemoves );\n    this.$source.off( Rekord.Collection.Events.Cleared, this.$onCleared );\n    this.$source.off( Rekord.Collection.Events.Reset, this.$onReset );\n  },\n\n  $select: function(select, fill)\n  {\n    if ( isArray( select ) )\n    {\n      var db = this.$source.database;\n      var remove = {};\n\n      for (var key in this)\n      {\n        if ( isBoolean( this[ key ] ) )\n        {\n          remove[ key ] = this[ key ];\n        }\n      }\n\n      for (var i = 0; i < select.length; i++)\n      {\n        var key = db.keyHandler.buildKeyFromInput( select[ i ] );\n\n        this[ key ] = true;\n\n        delete remove[ key ];\n      }\n\n      for (var key in remove)\n      {\n        delete this[ key ];\n      }\n\n      if ( fill )\n      {\n        var keys = this.$source.keys();\n\n        for (var i = 0; i < keys.length; i++)\n        {\n          var key = keys[ i ];\n\n          if ( !this[ key ] )\n          {\n            this[ key ] = false;\n          }\n        }\n      }\n\n    }\n  },\n\n  $selection: function(out)\n  {\n    var source = this.$source;\n    var selection = out || [];\n\n    for (var key in this)\n    {\n      if ( this[ key ] === true )\n      {\n        var model = source.get( key );\n\n        if ( model )\n        {\n          selection.push( model );\n        }\n      }\n    }\n\n    return selection;\n  },\n\n  $handleRemove: function(removed)\n  {\n    var db = this.$source.database;\n    var key = db.keyHandler.buildKeyFromInput( removed );\n\n    delete this[ key ];\n  },\n\n  $handleRemoves: function(removed)\n  {\n    for (var i = 0; i < removed.length; i++)\n    {\n      this.$handleRemove( removed[i] );\n    }\n  },\n\n  $handleCleared: function()\n  {\n    for (var key in this)\n    {\n      if ( isBoolean( this[ key ] ) )\n      {\n        delete this[ key ];\n      }\n    }\n  },\n\n  $handleReset: function()\n  {\n    var source = this.$source;\n\n    for (var key in this)\n    {\n      if ( isBoolean( this[ key ] ) )\n      {\n        if ( !source.has( key ) )\n        {\n          delete this[ key ];\n        }\n      }\n    }\n  }\n};\n\nRekord.ModelCollection.prototype.selectable = function(select, fill)\n{\n  return new Select( this, select, fill );\n};\n\n\nfunction hasModule(moduleName)\n{\n  if ( moduleName in hasModule.tested )\n  {\n    return hasModule.tested[ moduleName ];\n  }\n\n  try\n  {\n    ng.module( moduleName );\n\n    hasModule.tested[ moduleName ] = true;\n  }\n  catch (e)\n  {\n    hasModule.tested[ moduleName ] = false;\n  }\n\n  return hasModule.tested[ moduleName ];\n}\n\nhasModule.tested = {};\n\nfunction getRouteParameter()\n{\n  return getRouteParameter.cached ? getRouteParameter.cached : getRouteParameter.cached =\n    ( hasModule( 'ui.router' ) ? '$stateParams' :\n      ( hasModule( 'ngRoute' ) ? '$route' :\n        false ) );\n}\n\nfunction buildParamResolver()\n{\n  if ( hasModule( 'ui.router') )\n  {\n    return function($stateParams)\n    {\n      return $stateParams;\n    };\n  }\n  else if ( hasModule( 'ngRoute') )\n  {\n    return function($route)\n    {\n      return $route.current;\n    };\n  }\n  return function()\n  {\n    return false;\n  };\n}\n\nfunction buildTemplateResolver(routeParams)\n{\n  return function(text)\n  {\n    if ( isString( text ) && routeParams )\n    {\n      return format( text, routeParams );\n    }\n\n    return text;\n  };\n}\n\ngetRouteParameter.cached = null;\n\nResolve.factory = function( name, callback )\n{\n  var param = getRouteParameter();\n  var paramResolver = buildParamResolver();\n  var cache = false;\n  var cachedValue = void 0;\n\n  function factory($q, routing)\n  {\n    var defer = $q.defer();\n\n    if ( cachedValue !== void 0 )\n    {\n      defer.resolve( cachedValue );\n    }\n    else\n    {\n      var routeParams = paramResolver( routing );\n      var templateResolver = buildTemplateResolver( routeParams );\n\n      if ( cache )\n      {\n        defer.promise.then(function(resolvedValue)\n        {\n          cachedValue = resolvedValue;\n        });\n      }\n\n      Rekord.get( name ).success(function(model)\n      {\n        callback( model, defer, templateResolver );\n      });\n    }\n\n    return defer.promise;\n  }\n\n  factory.$inject = ['$q'];\n\n  if ( param )\n  {\n    factory.$inject.push( param );\n  }\n\n  factory.cache = function()\n  {\n    cache = true;\n\n    return factory;\n  };\n\n  factory.inject = function()\n  {\n    for (var i = 0; i < arguments.length; i++)\n    {\n      var arg = arguments[ i ];\n\n      if ( isArray( arg ) )\n      {\n        factory.$inject.push.apply( factory.$inject, arg );\n      }\n      else\n      {\n        factory.$inject.push( arg );\n      }\n    }\n\n    return factory;\n  };\n\n  return factory;\n};\n\nfunction ResolveInput(obj, resolver)\n{\n  if ( isObject( obj ) )\n  {\n    var resolved = {};\n\n    for (var prop in obj)\n    {\n      resolved[ prop ] = resolver( obj[ prop ] );\n    }\n\n    return resolved;\n  }\n\n  return resolver( obj );\n}\n\nResolve.model = function( name, input )\n{\n  return Resolve.factory( name, function(model, defer, templateResolver)\n  {\n    var resolvedInput = ResolveInput( input, templateResolver );\n\n    model.Database.grabModel( resolvedInput, function(instance)\n    {\n      if ( instance )\n      {\n        defer.resolve( instance );\n      }\n      else\n      {\n        defer.reject();\n      }\n    });\n  });\n};\n\nResolve.fetch = function( name, input )\n{\n  return Resolve.factory( name, function(model, defer, templateResolver)\n  {\n    var resolvedInput = ResolveInput( input, templateResolver );\n\n    model.fetch( resolvedInput, function(instance)\n    {\n      defer.resolve( instance );\n    });\n  });\n};\n\nResolve.fetchAll = function( name )\n{\n  return Resolve.factory( name, function(model, defer, templateResolver)\n  {\n    model.fetchAll(function(models)\n    {\n      defer.resolve( models );\n    });\n  });\n};\n\nResolve.grab = function( name, input )\n{\n  return Resolve.factory( name, function(model, defer, templateResolver)\n  {\n    var resolvedInput = ResolveInput( input, templateResolver );\n\n    model.grab( resolvedInput, function(instance)\n    {\n      defer.resolve( instance );\n    });\n  });\n};\n\nResolve.grabAll = function( name )\n{\n  return Resolve.factory( name, function(model, defer, templateResolver)\n  {\n    model.grabAll(function(models)\n    {\n      defer.resolve( models );\n    });\n  });\n};\n\nResolve.create = function( name, properties, dontSave )\n{\n  return Resolve.factory( name, function(model, defer, templateResolver)\n  {\n    var resolvedProperties = ResolveInput( properties, templateResolver );\n\n    if ( dontSave )\n    {\n      defer.resolve( new model( resolvedProperties ) );\n    }\n    else\n    {\n      var instance = model.create( resolvedProperties );\n\n      if ( instance.$isSaved() )\n      {\n        defer.resolve( instance );\n      }\n      else\n      {\n        instance.$once( Rekord.Model.Events.RemoteSaves, function()\n        {\n          defer.resolve( instance );\n        });\n      }\n    }\n  });\n};\n\nResolve.search = function( name, url, options, props )\n{\n  return Resolve.factory( name, function(model, defer, templateResolver)\n  {\n    var resolvedQuery = ResolveInput( url, templateResolver );\n    var remoteQuery = model.search( resolvedQuery, options, props, true );\n\n    remoteQuery.$promise.success(function()\n    {\n      defer.resolve( remoteQuery );\n    });\n\n    remoteQuery.$promise.failure(function()\n    {\n      defer.reject();\n    });\n  });\n};\n\nResolve.all = function( name )\n{\n  return Resolve.factory( name, function(model, defer, templateResolver)\n  {\n    model.Database.ready(function()\n    {\n      defer.resolve( model.all() );\n    });\n  });\n};\n\nResolve.where = function( name, whereProperties, whereValue, whereEquals )\n{\n  return Resolve.factory( name, function(model, defer, templateResolver)\n  {\n    var resolvedWhereProperties = ResolveInput( whereProperties, templateResolver );\n    var resolvedWhereValue = ResolveInput( whereValue, templateResolver );\n\n    model.Database.ready(function()\n    {\n      defer.resolve( model.all().filtered( resolvedWhereProperties, resolvedWhereValue, whereEquals ) );\n    });\n  });\n};\n\nFactory.helper = function(name, impl)\n{\n  var ref = null;\n\n  Rekord.get( name ).success(function(rekord)\n  {\n    ref = rekord;\n  });\n\n  return function FactoryImplementation()\n  {\n    if ( !ref )\n    {\n      throw name + ' Rekord failed to load or does not exist.';\n    }\n\n    return impl( ref );\n  };\n};\n\nFactory.search = function(name, url, options, props, run, paged)\n{\n  return Factory.helper( name, function(model)\n  {\n    return paged ?\n      model.searchPaged( url, options, props, run ) :\n      model.search( url, options, props, run );\n  });\n};\n\nFactory.ref = function(name, callback, context)\n{\n  return Factory.helper( name, function(model)\n  {\n    return model;\n  });\n};\n\nFactory.lazyLoad = function(name, callback, context)\n{\n  var initialized = {};\n\n  return Factory.helper( name, function(model)\n  {\n    if ( !model.Database.remoteLoaded && !(name in initialized) )\n    {\n      initialized[ name ] = true;\n\n      model.Database.refresh( callback, context );\n    }\n\n    return model;\n  });\n};\n\nFactory.filtered = function(name, where, value, equals)\n{\n  return Factory.helper( name, function(model)\n  {\n    return model.filtered( where, value, equals );\n  });\n};\n\nFactory.all = function(name)\n{\n  return Factory.helper( name, function(model)\n  {\n    return model.all();\n  });\n};\n\nFactory.fetchAll = function(name, callback, context)\n{\n  return Factory.helper( name, function(model)\n  {\n    return model.fetchAll( callback, context );\n  });\n};\n\nFactory.grabAll = function(name, callback, context)\n{\n  return Factory.helper( name, function(model)\n  {\n    return model.grabAll( callback, context );\n  });\n};\n\n\nfunction ModelFilter()\n{\n  return function filterModels(models)\n  {\n    if ( !models || !models.toArray )\n    {\n      return models;\n    }\n\n    var array = models.toArray();\n    var ids = {};\n\n    for (var i = 0; i < array.length; i++)\n    {\n      var model = array[ i ];\n\n      if ( !model.$key || model.$key() in ids )\n      {\n        array.splice( i--, 1 );\n      }\n      else\n      {\n        ids[ model.$key() ] = model;\n      }\n    }\n\n    return array;\n  };\n}\n\n\n  app\n    .run( ['$http', '$filter', InitializeRekord] )\n    .filter( 'models', ModelFilter )\n  ;\n\n  Rekord.Bind = Sync;\n  Rekord.Sync = Sync;\n  Rekord.Resolve = Resolve;\n  Rekord.Select = Select;\n  Rekord.Factory = Factory;\n  Rekord.Debugs.ScopeDigest = 100000;\n\n  return Rekord;\n\n}));\n"],"sourceRoot":"/source/"}