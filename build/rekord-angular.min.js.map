{"version":3,"sources":["header.js","InitializeRekord.js","Sync.js","Select.js","Resolve.js","ModelFilter.js","Factory.js","footer.js"],"names":["global","Rekord","ng","app","undefined","removeTrailingSlash","x","charAt","length","substring","InitializeRekord","$http","$filter","execute","method","data","url","success","failure","offlineValue","debug","Debugs","REST","this","forceOffline","onRestSuccess","response","onRestError","status","options","then","RestFactory","database","all","api","get","model","$key","create","encoded","update","remove","query","isEmpty","formatDate","date","format","setRest","listenToNetworkStatus","Sync","scope","target","callback","on","Select","source","select","fill","$onRemove","bind","$handleRemove","$onRemoves","$handleRemoves","$onCleared","$handleCleared","$onReset","$handleReset","$reset","$select","hasModule","moduleName","tested","module","e","getRouteParameter","cached","buildParamResolver","$stateParams","$route","current","buildTemplateResolver","routeParams","text","isString","ResolveInput","obj","resolver","isObject","resolved","prop","ModelFilter","models","toArray","array","ids","i","splice","isFunction","isArray","isBoolean","isRekord","Resolve","Factory","a","Array","prototype","Database","targetFunction","$change","off","notify","$on","$evalAsync","apply","ScopeDigest","$source","$disconnect","$connect","Collection","Events","Remove","Removes","Cleared","Reset","db","key","buildKeyFromInput","keys","$selection","out","selection","push","removed","has","ModelCollection","selectable","factory","name","$q","routing","defer","cachedValue","resolve","paramResolver","templateResolver","cache","promise","resolvedValue","param","$inject","inject","arguments","arg","input","resolvedInput","grabModel","instance","reject","fetch","fetchAll","grab","grabAll","properties","dontSave","resolvedProperties","$isSaved","$once","Model","RemoteSaves","search","props","resolvedQuery","remoteQuery","$promise","ready","where","whereProperties","whereValue","whereEquals","resolvedWhereProperties","resolvedWhereValue","filtered","helper","impl","ref","rekord","run","paged","searchPaged","context","lazyLoad","initialized","remoteLoaded","refresh","value","equals","filter","Bind","angular"],"mappings":"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","file":"rekord-angular.min.js","sourcesContent":["(function (global, Rekord, ng, app, undefined)\n{\n\n  var isFunction = Rekord.isFunction;\n  var isString = Rekord.isString;\n  var isArray = Rekord.isArray;\n  var isObject = Rekord.isObject;\n  var isBoolean = Rekord.isBoolean;\n  var isRekord = Rekord.isRekord;\n  var isEmpty = Rekord.isEmpty;\n\n  var format = Rekord.format;\n  var bind = Rekord.bind;\n\n  var Resolve = {};\n  var Factory = {};\n\n  ng.isArray = function(a)\n  {\n    return a instanceof Array;\n  };\n","\nfunction removeTrailingSlash(x)\n{\n  return x.charAt(x.length - 1) === '/' ? x.substring(0, x.length - 1) : x;\n}\n\nfunction InitializeRekord($http, $filter)\n{\n  function execute( method, data, url, success, failure, offlineValue )\n  {\n    Rekord.debug( Rekord.Debugs.REST, this, method, url, data );\n\n    if ( Rekord.forceOffline )\n    {\n      failure( offlineValue, 0 );\n    }\n    else\n    {\n      var onRestSuccess = function(response)\n      {\n        success( response.data );\n      };\n\n      var onRestError = function(response)\n      {\n        failure( response.data, response.status );\n      };\n\n      var options =\n      {\n        method: method,\n        data: data,\n        url: url\n      };\n\n      $http( options ).then( onRestSuccess, onRestError );\n    }\n  }\n\n  function RestFactory(database)\n  {\n    return {\n      all: function( success, failure )\n      {\n        execute( 'GET', undefined, database.api, success, failure, [] );\n      },\n      get: function( model, success, failure )\n      {\n        execute( 'GET', undefined, removeTrailingSlash( database.api + model.$key() ), success, failure );\n      },\n      create: function( model, encoded, success, failure )\n      {\n        execute( 'POST', encoded, removeTrailingSlash( database.api ), success, failure, {} );\n      },\n      update: function( model, encoded, success, failure )\n      {\n        execute( 'PUT', encoded, removeTrailingSlash( database.api + model.$key() ), success, failure, {} );\n      },\n      remove: function( model, success, failure )\n      {\n        execute( 'DELETE', undefined, removeTrailingSlash( database.api + model.$key() ), success, failure, {} );\n      },\n      query: function( url, data, success, failure )\n      {\n        var method = isEmpty( data ) ? 'GET' : 'POST';\n\n        execute( method, data, url, success, failure );\n      }\n    };\n  }\n\n  function formatDate(date, format)\n  {\n    return $filter('date')( date, format );\n  }\n\n  Rekord.setRest( RestFactory );\n  Rekord.listenToNetworkStatus();\n\n  Rekord.formatDate = formatDate;\n}\n","function Sync( scope, target, callback )\n{\n  if ( !(this instanceof Sync) )\n  {\n    return new Sync( scope, target, callback );\n  }\n\n  this.scope = scope;\n  this.target = target;\n  this.callback = callback;\n\n  this.on();\n}\n\nSync.prototype =\n{\n  on: function()\n  {\n    var target = this.target;\n\n    if ( isRekord( target ) )\n    {\n      target = this.target = target.Database;\n    }\n\n    var targetFunction = target.$change ? '$change' : 'change';\n\n    if ( target[ targetFunction ] )\n    {\n      this.off = target[ targetFunction ]( this.notify, this );\n\n      this.scope.$on( '$destroy', this.off );\n    }\n  },\n  notify: function()\n  {\n    // $digest would be better for performance - but there's no official way\n    // to see if a digest cycle is currently running\n    this.scope.$evalAsync();\n\n    if ( isFunction( this.callback ) )\n    {\n      this.callback.apply( this.target );\n    }\n\n    Rekord.debug( Rekord.Debugs.ScopeDigest, this, this.scope );\n  }\n};\n","\nfunction Select(source, select, fill)\n{\n  this.$onRemove  = bind( this, this.$handleRemove );\n  this.$onRemoves = bind( this, this.$handleRemoves );\n  this.$onCleared = bind( this, this.$handleCleared );\n  this.$onReset   = bind( this, this.$handleReset );\n\n  this.$reset( source );\n  this.$select( select, fill );\n}\n\nSelect.prototype =\n{\n\n  $reset: function(source)\n  {\n    if ( this.$source !== source )\n    {\n      if ( this.$source )\n      {\n        this.$disconnect();\n      }\n\n      this.$source = source;\n      this.$connect();\n    }\n  },\n\n  $connect: function()\n  {\n    this.$source.on( Rekord.Collection.Events.Remove, this.$onRemove );\n    this.$source.on( Rekord.Collection.Events.Removes, this.$onRemoves );\n    this.$source.on( Rekord.Collection.Events.Cleared, this.$onCleared );\n    this.$source.on( Rekord.Collection.Events.Reset, this.$onReset );\n  },\n\n  $disconnect: function()\n  {\n    this.$source.off( Rekord.Collection.Events.Remove, this.$onRemove );\n    this.$source.off( Rekord.Collection.Events.Removes, this.$onRemoves );\n    this.$source.off( Rekord.Collection.Events.Cleared, this.$onCleared );\n    this.$source.off( Rekord.Collection.Events.Reset, this.$onReset );\n  },\n\n  $select: function(select, fill)\n  {\n    if ( isArray( select ) )\n    {\n      var db = this.$source.database;\n      var remove = {};\n\n      for (var key in this)\n      {\n        if ( isBoolean( this[ key ] ) )\n        {\n          remove[ key ] = this[ key ];\n        }\n      }\n\n      for (var i = 0; i < select.length; i++)\n      {\n        var key = db.buildKeyFromInput( select[ i ] );\n\n        this[ key ] = true;\n\n        delete remove[ key ];\n      }\n\n      for (var key in remove)\n      {\n        delete this[ key ];\n      }\n\n      if ( fill )\n      {\n        var keys = this.$source.keys();\n\n        for (var i = 0; i < keys.length; i++)\n        {\n          var key = keys[ i ];\n\n          if ( !this[ key ] )\n          {\n            this[ key ] = false;\n          }\n        }\n      }\n\n    }\n  },\n\n  $selection: function(out)\n  {\n    var source = this.$source;\n    var selection = out || [];\n\n    for (var key in this)\n    {\n      if ( this[ key ] === true )\n      {\n        var model = source.get( key );\n\n        if ( model )\n        {\n          selection.push( model );\n        }\n      }\n    }\n\n    return selection;\n  },\n\n  $handleRemove: function(removed)\n  {\n    var db = this.$source.database;\n    var key = db.buildKeyFromInput( removed );\n\n    delete this[ key ];\n  },\n\n  $handleRemoves: function(removed)\n  {\n    for (var i = 0; i < removed.length; i++)\n    {\n      this.$handleRemove( removed[i] );\n    }\n  },\n\n  $handleCleared: function()\n  {\n    for (var key in this)\n    {\n      if ( isBoolean( this[ key ] ) )\n      {\n        delete this[ key ];\n      }\n    }\n  },\n\n  $handleReset: function()\n  {\n    var source = this.$source;\n\n    for (var key in this)\n    {\n      if ( isBoolean( this[ key ] ) )\n      {\n        if ( !source.has( key ) )\n        {\n          delete this[ key ];\n        }\n      }\n    }\n  }\n};\n\nRekord.ModelCollection.prototype.selectable = function(select, fill)\n{\n  return new Select( this, select, fill );\n};\n","\nfunction hasModule(moduleName)\n{\n  if ( moduleName in hasModule.tested )\n  {\n    return hasModule.tested[ moduleName ];\n  }\n\n  try\n  {\n    ng.module( moduleName );\n\n    hasModule.tested[ moduleName ] = true;\n  }\n  catch (e)\n  {\n    hasModule.tested[ moduleName ] = false;\n  }\n\n  return hasModule.tested[ moduleName ];\n}\n\nhasModule.tested = {};\n\nfunction getRouteParameter()\n{\n  return getRouteParameter.cached ? getRouteParameter.cached : getRouteParameter.cached =\n    ( hasModule( 'ui.router' ) ? '$stateParams' :\n      ( hasModule( 'ngRoute' ) ? '$route' :\n        false ) );\n}\n\nfunction buildParamResolver()\n{\n  if ( hasModule( 'ui.router') )\n  {\n    return function($stateParams)\n    {\n      return $stateParams;\n    };\n  }\n  else if ( hasModule( 'ngRoute') )\n  {\n    return function($route)\n    {\n      return $route.current;\n    };\n  }\n  return function()\n  {\n    return false;\n  };\n}\n\nfunction buildTemplateResolver(routeParams)\n{\n  return function(text)\n  {\n    if ( isString( text ) && routeParams )\n    {\n      return format( text, routeParams );\n    }\n\n    return text;\n  };\n}\n\ngetRouteParameter.cached = null;\n\nResolve.factory = function( name, callback )\n{\n  var param = getRouteParameter();\n  var paramResolver = buildParamResolver();\n  var cache = false;\n  var cachedValue = void 0;\n\n  function factory($q, routing)\n  {\n    var defer = $q.defer();\n\n    if ( cachedValue !== void 0 )\n    {\n      defer.resolve( cachedValue );\n    }\n    else\n    {\n      var routeParams = paramResolver( routing );\n      var templateResolver = buildTemplateResolver( routeParams );\n\n      if ( cache )\n      {\n        defer.promise.then(function(resolvedValue)\n        {\n          cachedValue = resolvedValue;\n        });\n      }\n\n      Rekord.get( name ).success(function(model)\n      {\n        callback( model, defer, templateResolver );\n      });\n    }\n\n    return defer.promise;\n  }\n\n  factory.$inject = ['$q'];\n\n  if ( param )\n  {\n    factory.$inject.push( param );\n  }\n\n  factory.cache = function()\n  {\n    cache = true;\n\n    return factory;\n  };\n\n  factory.inject = function()\n  {\n    for (var i = 0; i < arguments.length; i++)\n    {\n      var arg = arguments[ i ];\n\n      if ( isArray( arg ) )\n      {\n        factory.$inject.push.apply( factory.$inject, arg );\n      }\n      else\n      {\n        factory.$inject.push( arg );\n      }\n    }\n\n    return factory;\n  };\n\n  return factory;\n};\n\nfunction ResolveInput(obj, resolver)\n{\n  if ( isObject( obj ) )\n  {\n    var resolved = {};\n\n    for (var prop in obj)\n    {\n      resolved[ prop ] = resolver( obj[ prop ] );\n    }\n\n    return resolved;\n  }\n\n  return resolver( obj );\n}\n\nResolve.model = function( name, input )\n{\n  return Resolve.factory( name, function(model, defer, templateResolver)\n  {\n    var resolvedInput = ResolveInput( input, templateResolver );\n\n    model.Database.grabModel( resolvedInput, function(instance)\n    {\n      if ( instance )\n      {\n        defer.resolve( instance );\n      }\n      else\n      {\n        defer.reject();\n      }\n    });\n  });\n};\n\nResolve.fetch = function( name, input )\n{\n  return Resolve.factory( name, function(model, defer, templateResolver)\n  {\n    var resolvedInput = ResolveInput( input, templateResolver );\n\n    model.fetch( resolvedInput, function(instance)\n    {\n      defer.resolve( instance );\n    });\n  });\n};\n\nResolve.fetchAll = function( name )\n{\n  return Resolve.factory( name, function(model, defer, templateResolver)\n  {\n    model.fetchAll(function(models)\n    {\n      defer.resolve( models );\n    });\n  });\n};\n\nResolve.grab = function( name, input )\n{\n  return Resolve.factory( name, function(model, defer, templateResolver)\n  {\n    var resolvedInput = ResolveInput( input, templateResolver );\n\n    model.grab( resolvedInput, function(instance)\n    {\n      defer.resolve( instance );\n    });\n  });\n};\n\nResolve.grabAll = function( name )\n{\n  return Resolve.factory( name, function(model, defer, templateResolver)\n  {\n    model.grabAll(function(models)\n    {\n      defer.resolve( models );\n    });\n  });\n};\n\nResolve.create = function( name, properties, dontSave )\n{\n  return Resolve.factory( name, function(model, defer, templateResolver)\n  {\n    var resolvedProperties = ResolveInput( properties, templateResolver );\n\n    if ( dontSave )\n    {\n      defer.resolve( new model( resolvedProperties ) );\n    }\n    else\n    {\n      var instance = model.create( resolvedProperties );\n\n      if ( instance.$isSaved() )\n      {\n        defer.resolve( instance );\n      }\n      else\n      {\n        instance.$once( Rekord.Model.Events.RemoteSaves, function()\n        {\n          defer.resolve( instance );\n        });\n      }\n    }\n  });\n};\n\nResolve.search = function( name, url, options, props )\n{\n  return Resolve.factory( name, function(model, defer, templateResolver)\n  {\n    var resolvedQuery = ResolveInput( url, templateResolver );\n    var remoteQuery = model.search( resolvedQuery, options, props, true );\n\n    remoteQuery.$promise.success(function()\n    {\n      defer.resolve( remoteQuery );\n    });\n\n    remoteQuery.$promise.failure(function()\n    {\n      defer.reject();\n    });\n  });\n};\n\nResolve.all = function( name )\n{\n  return Resolve.factory( name, function(model, defer, templateResolver)\n  {\n    model.Database.ready(function()\n    {\n      defer.resolve( model.all() );\n    });\n  });\n};\n\nResolve.where = function( name, whereProperties, whereValue, whereEquals )\n{\n  return Resolve.factory( name, function(model, defer, templateResolver)\n  {\n    var resolvedWhereProperties = ResolveInput( whereProperties, templateResolver );\n    var resolvedWhereValue = ResolveInput( whereValue, templateResolver );\n\n    model.Database.ready(function()\n    {\n      defer.resolve( model.all().filtered( resolvedWhereProperties, resolvedWhereValue, whereEquals ) );\n    });\n  });\n};\n","\nfunction ModelFilter()\n{\n  return function filterModels(models)\n  {\n    if ( !models || !models.toArray )\n    {\n      return models;\n    }\n\n    var array = models.toArray();\n    var ids = {};\n\n    for (var i = 0; i < array.length; i++)\n    {\n      var model = array[ i ];\n\n      if ( !model.$key || model.$key() in ids )\n      {\n        array.splice( i--, 1 );\n      }\n      else\n      {\n        ids[ model.$key() ] = model;\n      }\n    }\n\n    return array;\n  };\n}\n","Factory.helper = function(name, impl)\n{\n  var ref = null;\n\n  Rekord.get( name ).success(function(rekord)\n  {\n    ref = rekord;\n  });\n\n  return function FactoryImplementation()\n  {\n    if ( !ref )\n    {\n      throw name + ' Rekord failed to load or does not exist.';\n    }\n\n    return impl( ref );\n  };\n};\n\nFactory.search = function(name, url, options, props, run, paged)\n{\n  return Factory.helper( name, function(model)\n  {\n    return paged ?\n      model.searchPaged( url, options, props, run ) :\n      model.search( url, options, props, run );\n  });\n};\n\nFactory.ref = function(name, callback, context)\n{\n  return Factory.helper( name, function(model)\n  {\n    return model;\n  });\n};\n\nFactory.lazyLoad = function(name, callback, context)\n{\n  var initialized = {};\n\n  return Factory.helper( name, function(model)\n  {\n    if ( !model.Database.remoteLoaded && !(name in initialized) )\n    {\n      initialized[ name ] = true;\n\n      model.Database.refresh( callback, context );\n    }\n\n    return model;\n  });\n};\n\nFactory.filtered = function(name, where, value, equals)\n{\n  return Factory.helper( name, function(model)\n  {\n    return model.filtered( where, value, equals );\n  });\n};\n\nFactory.all = function(name)\n{\n  return Factory.helper( name, function(model)\n  {\n    return model.all();\n  });\n};\n\nFactory.fetchAll = function(name, callback, context)\n{\n  return Factory.helper( name, function(model)\n  {\n    return model.fetchAll( callback, context );\n  });\n};\n\nFactory.grabAll = function(name, callback, context)\n{\n  return Factory.helper( name, function(model)\n  {\n    return model.grabAll( callback, context );\n  });\n};\n","\n  app\n    .run( ['$http', '$filter', InitializeRekord] )\n    .filter( 'models', ModelFilter )\n  ;\n\n  Rekord.Bind = Sync;\n  Rekord.Sync = Sync;\n  Rekord.Resolve = Resolve;\n  Rekord.Select = Select;\n  Rekord.Factory = Factory;\n  Rekord.Debugs.ScopeDigest = 100000;\n\n})( this, this.Rekord, this.angular, this.angular.module('rekord', []) );\n"],"sourceRoot":"/source/"}