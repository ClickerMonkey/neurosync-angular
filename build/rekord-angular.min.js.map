{"version":3,"sources":["rekord-angular.min.js"],"names":["global","Rekord","ng","app","undefined","InitializeRekord","$http","$filter","Rest","database","this","RestFactory","api","Rekord_rest","call","ajax","options","success","failure","then","formatDate","date","format","prototype","removeTrailingSlash","x","charAt","length","substring","all","execute","get","model","$key","create","encoded","update","remove","query","url","data","method","isEmpty","offlineValue","debug","Debugs","REST","forceOffline","onRestSuccess","response","onRestError","status","transfer","Angular","adjustOptions","setRest","listenToNetworkStatus","rest","noop","RestClass","Sync","scope","target","callback","on","Select","source","select","fill","$onRemove","bind","$handleRemove","$onRemoves","$handleRemoves","$onCleared","$handleCleared","$onReset","$handleReset","$reset","$select","hasModule","moduleName","tested","module","e","getRouteParameter","cached","buildParamResolver","$stateParams","$route","current","buildTemplateResolver","routeParams","text","isString","ResolveInput","obj","resolver","isObject","resolved","prop","ModelFilter","models","toArray","array","ids","i","splice","isFunction","isArray","isBoolean","isRekord","Resolve","Factory","a","Array","Database","targetFunction","$change","off","notify","$on","$evalAsync","apply","ScopeDigest","$source","$disconnect","$connect","Collection","Events","Remove","Removes","Cleared","Reset","db","key","keyHandler","buildKeyFromInput","keys","$selection","out","selection","push","removed","has","ModelCollection","selectable","factory","name","$q","routing","defer","cachedValue","resolve","paramResolver","templateResolver","cache","promise","resolvedValue","param","$inject","inject","arguments","arg","input","resolvedInput","grabModel","instance","reject","fetch","fetchAll","grab","grabAll","properties","dontSave","resolvedProperties","$isSaved","$once","Model","RemoteSaves","search","props","resolvedQuery","remoteQuery","$promise","ready","where","whereProperties","whereValue","whereEquals","resolvedWhereProperties","resolvedWhereValue","filtered","helper","impl","ref","rekord","run","paged","searchPaged","context","lazyLoad","initialized","remoteLoaded","refresh","value","equals","filter","Bind","angular"],"mappings":"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","file":"rekord-angular.min.js","sourcesContent":["/* rekord-angular 1.4.2 - A rekord binding to angular - implementing Rekord.rest by Philip Diffenderfer */\n(function (global, Rekord, ng, app, undefined)\n{\n\n  var isFunction = Rekord.isFunction;\n  var isString = Rekord.isString;\n  var isArray = Rekord.isArray;\n  var isObject = Rekord.isObject;\n  var isBoolean = Rekord.isBoolean;\n  var isRekord = Rekord.isRekord;\n  var isEmpty = Rekord.isEmpty;\n\n  var format = Rekord.format;\n  var bind = Rekord.bind;\n  var noop = Rekord.noop;\n  var transfer = Rekord.transfer;\n\n  var Rekord_rest = Rekord.rest;\n\n  var Resolve = {};\n  var Factory = {};\n\n  ng.isArray = function(a)\n  {\n    return a instanceof Array;\n  };\n\n\nfunction InitializeRekord($http, $filter)\n{\n  function Rest(database)\n  {\n    this.database = database;\n  }\n\n  Rest.prototype =\n  {\n    removeTrailingSlash: function(x)\n    {\n      return x.charAt(x.length - 1) === '/' ? x.substring(0, x.length - 1) : x;\n    },\n    all: function( success, failure )\n    {\n      this.execute( 'GET', null, undefined, this.database.api, success, failure, [] );\n    },\n    get: function( model, success, failure )\n    {\n      this.execute( 'GET', model, undefined, this.removeTrailingSlash( this.database.api + model.$key() ), success, failure );\n    },\n    create: function( model, encoded, success, failure )\n    {\n      this.execute( 'POST', model, encoded, this.removeTrailingSlash( this.database.api ), success, failure, {} );\n    },\n    update: function( model, encoded, success, failure )\n    {\n      this.execute( 'PUT', model, encoded, this.removeTrailingSlash( this.database.api + model.$key() ), success, failure, {} );\n    },\n    remove: function( model, success, failure )\n    {\n      this.execute( 'DELETE', model, undefined, this.removeTrailingSlash( this.database.api + model.$key() ), success, failure, {} );\n    },\n    query: function( url, data, success, failure )\n    {\n      var method = isEmpty( data ) ? 'GET' : 'POST';\n\n      this.execute( method, null, data, url, success, failure );\n    },\n    execute: function( method, model, data, url, success, failure, offlineValue )\n    {\n      Rekord.debug( Rekord.Debugs.REST, this, method, url, data );\n\n      if ( Rekord.forceOffline )\n      {\n        failure( offlineValue, 0 );\n      }\n      else\n      {\n        var onRestSuccess = function(response)\n        {\n          success( response.data );\n        };\n\n        var onRestError = function(response)\n        {\n          failure( response.data, response.status );\n        };\n\n        var options = transfer( Rekord.Angular.options, {\n          method: method,\n          data: data,\n          url: url\n        });\n\n        Rekord.Angular.adjustOptions( options, this.database, method, model, data, url, success, failure );\n        Rekord.Angular.ajax( options, onRestSuccess, onRestError );\n      }\n    }\n  };\n\n  function RestFactory(database)\n  {\n    if ( !database.api )\n    {\n      return Rekord_rest.call( this, database );\n    }\n\n    return new Rest( database );\n  }\n\n  function ajax(options, success, failure)\n  {\n    $http( options ).then( success, failure );\n  }\n\n  function formatDate(date, format)\n  {\n    return $filter('date')( date, format );\n  }\n\n  Rekord.setRest( RestFactory );\n  Rekord.listenToNetworkStatus();\n\n  Rekord.formatDate = formatDate;\n\n  Rekord.Angular =\n  {\n    rest: RestFactory,\n    options: {},\n    adjustOptions: noop,\n    ajax: ajax,\n    RestClass: Rest\n  };\n}\n\nfunction Sync( scope, target, callback )\n{\n  if ( !(this instanceof Sync) )\n  {\n    return new Sync( scope, target, callback );\n  }\n\n  this.scope = scope;\n  this.target = target;\n  this.callback = callback;\n\n  this.on();\n}\n\nSync.prototype =\n{\n  on: function()\n  {\n    var target = this.target;\n\n    if ( isRekord( target ) )\n    {\n      target = this.target = target.Database;\n    }\n\n    var targetFunction = target.$change ? '$change' : 'change';\n\n    if ( target[ targetFunction ] )\n    {\n      this.off = target[ targetFunction ]( this.notify, this );\n\n      this.scope.$on( '$destroy', this.off );\n    }\n  },\n  notify: function()\n  {\n    // $digest would be better for performance - but there's no official way\n    // to see if a digest cycle is currently running\n    this.scope.$evalAsync();\n\n    if ( isFunction( this.callback ) )\n    {\n      this.callback.apply( this.target );\n    }\n\n    Rekord.debug( Rekord.Debugs.ScopeDigest, this, this.scope );\n  }\n};\n\n\nfunction Select(source, select, fill)\n{\n  this.$onRemove  = bind( this, this.$handleRemove );\n  this.$onRemoves = bind( this, this.$handleRemoves );\n  this.$onCleared = bind( this, this.$handleCleared );\n  this.$onReset   = bind( this, this.$handleReset );\n\n  this.$reset( source );\n  this.$select( select, fill );\n}\n\nSelect.prototype =\n{\n\n  $reset: function(source)\n  {\n    if ( this.$source !== source )\n    {\n      if ( this.$source )\n      {\n        this.$disconnect();\n      }\n\n      this.$source = source;\n      this.$connect();\n    }\n  },\n\n  $connect: function()\n  {\n    this.$source.on( Rekord.Collection.Events.Remove, this.$onRemove );\n    this.$source.on( Rekord.Collection.Events.Removes, this.$onRemoves );\n    this.$source.on( Rekord.Collection.Events.Cleared, this.$onCleared );\n    this.$source.on( Rekord.Collection.Events.Reset, this.$onReset );\n  },\n\n  $disconnect: function()\n  {\n    this.$source.off( Rekord.Collection.Events.Remove, this.$onRemove );\n    this.$source.off( Rekord.Collection.Events.Removes, this.$onRemoves );\n    this.$source.off( Rekord.Collection.Events.Cleared, this.$onCleared );\n    this.$source.off( Rekord.Collection.Events.Reset, this.$onReset );\n  },\n\n  $select: function(select, fill)\n  {\n    if ( isArray( select ) )\n    {\n      var db = this.$source.database;\n      var remove = {};\n\n      for (var key in this)\n      {\n        if ( isBoolean( this[ key ] ) )\n        {\n          remove[ key ] = this[ key ];\n        }\n      }\n\n      for (var i = 0; i < select.length; i++)\n      {\n        var key = db.keyHandler.buildKeyFromInput( select[ i ] );\n\n        this[ key ] = true;\n\n        delete remove[ key ];\n      }\n\n      for (var key in remove)\n      {\n        delete this[ key ];\n      }\n\n      if ( fill )\n      {\n        var keys = this.$source.keys();\n\n        for (var i = 0; i < keys.length; i++)\n        {\n          var key = keys[ i ];\n\n          if ( !this[ key ] )\n          {\n            this[ key ] = false;\n          }\n        }\n      }\n\n    }\n  },\n\n  $selection: function(out)\n  {\n    var source = this.$source;\n    var selection = out || [];\n\n    for (var key in this)\n    {\n      if ( this[ key ] === true )\n      {\n        var model = source.get( key );\n\n        if ( model )\n        {\n          selection.push( model );\n        }\n      }\n    }\n\n    return selection;\n  },\n\n  $handleRemove: function(removed)\n  {\n    var db = this.$source.database;\n    var key = db.keyHandler.buildKeyFromInput( removed );\n\n    delete this[ key ];\n  },\n\n  $handleRemoves: function(removed)\n  {\n    for (var i = 0; i < removed.length; i++)\n    {\n      this.$handleRemove( removed[i] );\n    }\n  },\n\n  $handleCleared: function()\n  {\n    for (var key in this)\n    {\n      if ( isBoolean( this[ key ] ) )\n      {\n        delete this[ key ];\n      }\n    }\n  },\n\n  $handleReset: function()\n  {\n    var source = this.$source;\n\n    for (var key in this)\n    {\n      if ( isBoolean( this[ key ] ) )\n      {\n        if ( !source.has( key ) )\n        {\n          delete this[ key ];\n        }\n      }\n    }\n  }\n};\n\nRekord.ModelCollection.prototype.selectable = function(select, fill)\n{\n  return new Select( this, select, fill );\n};\n\n\nfunction hasModule(moduleName)\n{\n  if ( moduleName in hasModule.tested )\n  {\n    return hasModule.tested[ moduleName ];\n  }\n\n  try\n  {\n    ng.module( moduleName );\n\n    hasModule.tested[ moduleName ] = true;\n  }\n  catch (e)\n  {\n    hasModule.tested[ moduleName ] = false;\n  }\n\n  return hasModule.tested[ moduleName ];\n}\n\nhasModule.tested = {};\n\nfunction getRouteParameter()\n{\n  return getRouteParameter.cached ? getRouteParameter.cached : getRouteParameter.cached =\n    ( hasModule( 'ui.router' ) ? '$stateParams' :\n      ( hasModule( 'ngRoute' ) ? '$route' :\n        false ) );\n}\n\nfunction buildParamResolver()\n{\n  if ( hasModule( 'ui.router') )\n  {\n    return function($stateParams)\n    {\n      return $stateParams;\n    };\n  }\n  else if ( hasModule( 'ngRoute') )\n  {\n    return function($route)\n    {\n      return $route.current;\n    };\n  }\n  return function()\n  {\n    return false;\n  };\n}\n\nfunction buildTemplateResolver(routeParams)\n{\n  return function(text)\n  {\n    if ( isString( text ) && routeParams )\n    {\n      return format( text, routeParams );\n    }\n\n    return text;\n  };\n}\n\ngetRouteParameter.cached = null;\n\nResolve.factory = function( name, callback )\n{\n  var param = getRouteParameter();\n  var paramResolver = buildParamResolver();\n  var cache = false;\n  var cachedValue = void 0;\n\n  function factory($q, routing)\n  {\n    var defer = $q.defer();\n\n    if ( cachedValue !== void 0 )\n    {\n      defer.resolve( cachedValue );\n    }\n    else\n    {\n      var routeParams = paramResolver( routing );\n      var templateResolver = buildTemplateResolver( routeParams );\n\n      if ( cache )\n      {\n        defer.promise.then(function(resolvedValue)\n        {\n          cachedValue = resolvedValue;\n        });\n      }\n\n      Rekord.get( name ).success(function(model)\n      {\n        callback( model, defer, templateResolver );\n      });\n    }\n\n    return defer.promise;\n  }\n\n  factory.$inject = ['$q'];\n\n  if ( param )\n  {\n    factory.$inject.push( param );\n  }\n\n  factory.cache = function()\n  {\n    cache = true;\n\n    return factory;\n  };\n\n  factory.inject = function()\n  {\n    for (var i = 0; i < arguments.length; i++)\n    {\n      var arg = arguments[ i ];\n\n      if ( isArray( arg ) )\n      {\n        factory.$inject.push.apply( factory.$inject, arg );\n      }\n      else\n      {\n        factory.$inject.push( arg );\n      }\n    }\n\n    return factory;\n  };\n\n  return factory;\n};\n\nfunction ResolveInput(obj, resolver)\n{\n  if ( isObject( obj ) )\n  {\n    var resolved = {};\n\n    for (var prop in obj)\n    {\n      resolved[ prop ] = resolver( obj[ prop ] );\n    }\n\n    return resolved;\n  }\n\n  return resolver( obj );\n}\n\nResolve.model = function( name, input )\n{\n  return Resolve.factory( name, function(model, defer, templateResolver)\n  {\n    var resolvedInput = ResolveInput( input, templateResolver );\n\n    model.Database.grabModel( resolvedInput, function(instance)\n    {\n      if ( instance )\n      {\n        defer.resolve( instance );\n      }\n      else\n      {\n        defer.reject();\n      }\n    });\n  });\n};\n\nResolve.fetch = function( name, input )\n{\n  return Resolve.factory( name, function(model, defer, templateResolver)\n  {\n    var resolvedInput = ResolveInput( input, templateResolver );\n\n    model.fetch( resolvedInput, function(instance)\n    {\n      defer.resolve( instance );\n    });\n  });\n};\n\nResolve.fetchAll = function( name )\n{\n  return Resolve.factory( name, function(model, defer, templateResolver)\n  {\n    model.fetchAll(function(models)\n    {\n      defer.resolve( models );\n    });\n  });\n};\n\nResolve.grab = function( name, input )\n{\n  return Resolve.factory( name, function(model, defer, templateResolver)\n  {\n    var resolvedInput = ResolveInput( input, templateResolver );\n\n    model.grab( resolvedInput, function(instance)\n    {\n      defer.resolve( instance );\n    });\n  });\n};\n\nResolve.grabAll = function( name )\n{\n  return Resolve.factory( name, function(model, defer, templateResolver)\n  {\n    model.grabAll(function(models)\n    {\n      defer.resolve( models );\n    });\n  });\n};\n\nResolve.create = function( name, properties, dontSave )\n{\n  return Resolve.factory( name, function(model, defer, templateResolver)\n  {\n    var resolvedProperties = ResolveInput( properties, templateResolver );\n\n    if ( dontSave )\n    {\n      defer.resolve( new model( resolvedProperties ) );\n    }\n    else\n    {\n      var instance = model.create( resolvedProperties );\n\n      if ( instance.$isSaved() )\n      {\n        defer.resolve( instance );\n      }\n      else\n      {\n        instance.$once( Rekord.Model.Events.RemoteSaves, function()\n        {\n          defer.resolve( instance );\n        });\n      }\n    }\n  });\n};\n\nResolve.search = function( name, url, options, props )\n{\n  return Resolve.factory( name, function(model, defer, templateResolver)\n  {\n    var resolvedQuery = ResolveInput( url, templateResolver );\n    var remoteQuery = model.search( resolvedQuery, options, props, true );\n\n    remoteQuery.$promise.success(function()\n    {\n      defer.resolve( remoteQuery );\n    });\n\n    remoteQuery.$promise.failure(function()\n    {\n      defer.reject();\n    });\n  });\n};\n\nResolve.all = function( name )\n{\n  return Resolve.factory( name, function(model, defer, templateResolver)\n  {\n    model.Database.ready(function()\n    {\n      defer.resolve( model.all() );\n    });\n  });\n};\n\nResolve.where = function( name, whereProperties, whereValue, whereEquals )\n{\n  return Resolve.factory( name, function(model, defer, templateResolver)\n  {\n    var resolvedWhereProperties = ResolveInput( whereProperties, templateResolver );\n    var resolvedWhereValue = ResolveInput( whereValue, templateResolver );\n\n    model.Database.ready(function()\n    {\n      defer.resolve( model.all().filtered( resolvedWhereProperties, resolvedWhereValue, whereEquals ) );\n    });\n  });\n};\n\nFactory.helper = function(name, impl)\n{\n  var ref = null;\n\n  Rekord.get( name ).success(function(rekord)\n  {\n    ref = rekord;\n  });\n\n  return function FactoryImplementation()\n  {\n    if ( !ref )\n    {\n      throw name + ' Rekord failed to load or does not exist.';\n    }\n\n    return impl( ref );\n  };\n};\n\nFactory.search = function(name, url, options, props, run, paged)\n{\n  return Factory.helper( name, function(model)\n  {\n    return paged ?\n      model.searchPaged( url, options, props, run ) :\n      model.search( url, options, props, run );\n  });\n};\n\nFactory.ref = function(name, callback, context)\n{\n  return Factory.helper( name, function(model)\n  {\n    return model;\n  });\n};\n\nFactory.lazyLoad = function(name, callback, context)\n{\n  var initialized = {};\n\n  return Factory.helper( name, function(model)\n  {\n    if ( !model.Database.remoteLoaded && !(name in initialized) )\n    {\n      initialized[ name ] = true;\n\n      model.Database.refresh( callback, context );\n    }\n\n    return model;\n  });\n};\n\nFactory.filtered = function(name, where, value, equals)\n{\n  return Factory.helper( name, function(model)\n  {\n    return model.filtered( where, value, equals );\n  });\n};\n\nFactory.all = function(name)\n{\n  return Factory.helper( name, function(model)\n  {\n    return model.all();\n  });\n};\n\nFactory.fetchAll = function(name, callback, context)\n{\n  return Factory.helper( name, function(model)\n  {\n    return model.fetchAll( callback, context );\n  });\n};\n\nFactory.grabAll = function(name, callback, context)\n{\n  return Factory.helper( name, function(model)\n  {\n    return model.grabAll( callback, context );\n  });\n};\n\n\nfunction ModelFilter()\n{\n  return function filterModels(models)\n  {\n    if ( !models || !models.toArray )\n    {\n      return models;\n    }\n\n    var array = models.toArray();\n    var ids = {};\n\n    for (var i = 0; i < array.length; i++)\n    {\n      var model = array[ i ];\n\n      if ( !model.$key || model.$key() in ids )\n      {\n        array.splice( i--, 1 );\n      }\n      else\n      {\n        ids[ model.$key() ] = model;\n      }\n    }\n\n    return array;\n  };\n}\n\n\n  app\n    .run( ['$http', '$filter', InitializeRekord] )\n    .filter( 'models', ModelFilter )\n  ;\n\n  Rekord.Bind = Sync;\n  Rekord.Sync = Sync;\n  Rekord.Resolve = Resolve;\n  Rekord.Select = Select;\n  Rekord.Factory = Factory;\n  Rekord.Debugs.ScopeDigest = 100000;\n\n})( this, this.Rekord, this.angular, this.angular.module('rekord', []) );\n"],"sourceRoot":"/source/"}